#include<stdio.h>
#include<string>
using namespace std;

typedef  unsigned int uint_32;
typedef  unsigned char uint_8;

class AES {
public:
	const uint_32* pUint_44 = (uint_32*)"\xDB\x61\x2C\x56\x78\x36\x5E\x81\xE3\xE5\x4E\xB8\x0D\x76\xAF\x72\xAC\x0D\x0C\xBA\xA5\x74\x1A\x4D\xF9\x82\x10\x1D\x5D\xAC\x41\x60\xA1\xCB\xE6\x63\x04\xBF\xFC\x2E\xFD\x3D\xEC\x33\xA0\x91\xAD\x53\x60\x3D\x83\x6D\x64\x82\x7F\x43\x99\xBF\x93\x70\x39\x2E\x3E\x23\xB4\x5B\xAB\xA6\xD0\xD9\xD4\xE5\x49\x66\x47\x95\x70\x48\x79\xB6\x7F\xAF\x8F\xD9\xAF\x76\x5B\x3C\xE6\x10\x1C\xA9\x96\x58\x65\x1F\x88\x22\x8F\x10\x27\x54\xD4\x2C\xC1\x44\xC8\x85\x57\x1C\xAD\x9A\x2D\xAE\xFD\x28\x0A\xFA\x29\x04\xCB\xBE\xE1\x81\x9C\xA2\x4C\x1B\x50\xE2\xB9\x3C\x5A\x18\x90\x38\x91\xA6\x71\xB9\x0D\x04\x3D\xA2\x96\xC4\xF3\x71\xCC\xDC\x63\x49\x5D\x7A\x12\xF0\x50\x7E\x2F\x52\xA7\x3E\x57\xBB\x71\xBD\x5A\xD9\xA7\xD2\x52\xAD\xF8\x5D\xD4\xA8";
	const uint_32* pUint_256_1 = (uint_32*)"\x51\xF4\xA7\x50\x7E\x41\x65\x53\x1A\x17\xA4\xC3\x3A\x27\x5E\x96\x3B\xAB\x6B\xCB\x1F\x9D\x45\xF1\xAC\xFA\x58\xAB\x4B\xE3\x03\x93\x20\x30\xFA\x55\xAD\x76\x6D\xF6\x88\xCC\x76\x91\xF5\x02\x4C\x25\x4F\xE5\xD7\xFC\xC5\x2A\xCB\xD7\x26\x35\x44\x80\xB5\x62\xA3\x8F\xDE\xB1\x5A\x49\x25\xBA\x1B\x67\x45\xEA\x0E\x98\x5D\xFE\xC0\xE1\xC3\x2F\x75\x02\x81\x4C\xF0\x12\x8D\x46\x97\xA3\x6B\xD3\xF9\xC6\x03\x8F\x5F\xE7\x15\x92\x9C\x95\xBF\x6D\x7A\xEB\x95\x52\x59\xDA\xD4\xBE\x83\x2D\x58\x74\x21\xD3\x49\xE0\x69\x29\x8E\xC9\xC8\x44\x75\xC2\x89\x6A\xF4\x8E\x79\x78\x99\x58\x3E\x6B\x27\xB9\x71\xDD\xBE\xE1\x4F\xB6\xF0\x88\xAD\x17\xC9\x20\xAC\x66\x7D\xCE\x3A\xB4\x63\xDF\x4A\x18\xE5\x1A\x31\x82\x97\x51\x33\x60\x62\x53\x7F\x45\xB1\x64\x77\xE0\xBB\x6B\xAE\x84\xFE\x81\xA0\x1C\xF9\x08\x2B\x94\x70\x48\x68\x58\x8F\x45\xFD\x19\x94\xDE\x6C\x87\x52\x7B\xF8\xB7\xAB\x73\xD3\x23\x72\x4B\x02\xE2\xE3\x1F\x8F\x57\x66\x55\xAB\x2A\xB2\xEB\x28\x07\x2F\xB5\xC2\x03\x86\xC5\x7B\x9A\xD3\x37\x08\xA5\x30\x28\x87\xF2\x23\xBF\xA5\xB2\x02\x03\x6A\xBA\xED\x16\x82\x5C\x8A\xCF\x1C\x2B\xA7\x79\xB4\x92\xF3\x07\xF2\xF0\x4E\x69\xE2\xA1\x65\xDA\xF4\xCD\x06\x05\xBE\xD5\xD1\x34\x62\x1F\xC4\xA6\xFE\x8A\x34\x2E\x53\x9D\xA2\xF3\x55\xA0\x05\x8A\xE1\x32\xA4\xF6\xEB\x75\x0B\x83\xEC\x39\x40\x60\xEF\xAA\x5E\x71\x9F\x06\xBD\x6E\x10\x51\x3E\x21\x8A\xF9\x96\xDD\x06\x3D\xDD\x3E\x05\xAE\x4D\xE6\xBD\x46\x91\x54\x8D\xB5\x71\xC4\x5D\x05\x04\x06\xD4\x6F\x60\x50\x15\xFF\x19\x98\xFB\x24\xD6\xBD\xE9\x97\x89\x40\x43\xCC\x67\xD9\x9E\x77\xB0\xE8\x42\xBD\x07\x89\x8B\x88\xE7\x19\x5B\x38\x79\xC8\xEE\xDB\xA1\x7C\x0A\x47\x7C\x42\x0F\xE9\xF8\x84\x1E\xC9\x00\x00\x00\x00\x09\x80\x86\x83\x32\x2B\xED\x48\x1E\x11\x70\xAC\x6C\x5A\x72\x4E\xFD\x0E\xFF\xFB\x0F\x85\x38\x56\x3D\xAE\xD5\x1E\x36\x2D\x39\x27\x0A\x0F\xD9\x64\x68\x5C\xA6\x21\x9B\x5B\x54\xD1\x24\x36\x2E\x3A\x0C\x0A\x67\xB1\x93\x57\xE7\x0F\xB4\xEE\x96\xD2\x1B\x9B\x91\x9E\x80\xC0\xC5\x4F\x61\xDC\x20\xA2\x5A\x77\x4B\x69\x1C\x12\x1A\x16\xE2\x93\xBA\x0A\xC0\xA0\x2A\xE5\x3C\x22\xE0\x43\x12\x1B\x17\x1D\x0E\x09\x0D\x0B\xF2\x8B\xC7\xAD\x2D\xB6\xA8\xB9\x14\x1E\xA9\xC8\x57\xF1\x19\x85\xAF\x75\x07\x4C\xEE\x99\xDD\xBB\xA3\x7F\x60\xFD\xF7\x01\x26\x9F\x5C\x72\xF5\xBC\x44\x66\x3B\xC5\x5B\xFB\x7E\x34\x8B\x43\x29\x76\xCB\x23\xC6\xDC\xB6\xED\xFC\x68\xB8\xE4\xF1\x63\xD7\x31\xDC\xCA\x42\x63\x85\x10\x13\x97\x22\x40\x84\xC6\x11\x20\x85\x4A\x24\x7D\xD2\xBB\x3D\xF8\xAE\xF9\x32\x11\xC7\x29\xA1\x6D\x1D\x9E\x2F\x4B\xDC\xB2\x30\xF3\x0D\x86\x52\xEC\x77\xC1\xE3\xD0\x2B\xB3\x16\x6C\xA9\x70\xB9\x99\x11\x94\x48\xFA\x47\xE9\x64\x22\xA8\xFC\x8C\xC4\xA0\xF0\x3F\x1A\x56\x7D\x2C\xD8\x22\x33\x90\xEF\x87\x49\x4E\xC7\xD9\x38\xD1\xC1\x8C\xCA\xA2\xFE\x98\xD4\x0B\x36\xA6\xF5\x81\xCF\xA5\x7A\xDE\x28\xDA\xB7\x8E\x26\x3F\xAD\xBF\xA4\x2C\x3A\x9D\xE4\x50\x78\x92\x0D\x6A\x5F\xCC\x9B\x54\x7E\x46\x62\xF6\x8D\x13\xC2\x90\xD8\xB8\xE8\x2E\x39\xF7\x5E\x82\xC3\xAF\xF5\x9F\x5D\x80\xBE\x69\xD0\x93\x7C\x6F\xD5\x2D\xA9\xCF\x25\x12\xB3\xC8\xAC\x99\x3B\x10\x18\x7D\xA7\xE8\x9C\x63\x6E\xDB\x3B\xBB\x7B\xCD\x26\x78\x09\x6E\x59\x18\xF4\xEC\x9A\xB7\x01\x83\x4F\x9A\xA8\xE6\x95\x6E\x65\xAA\xFF\xE6\x7E\x21\xBC\xCF\x08\xEF\x15\xE8\xE6\xBA\xE7\x9B\xD9\x4A\x6F\x36\xCE\xEA\x9F\x09\xD4\x29\xB0\x7C\xD6\x31\xA4\xB2\xAF\x2A\x3F\x23\x31\xC6\xA5\x94\x30\x35\xA2\x66\xC0\x74\x4E\xBC\x37\xFC\x82\xCA\xA6\xE0\x90\xD0\xB0\x33\xA7\xD8\x15\xF1\x04\x98\x4A\x41\xEC\xDA\xF7\x7F\xCD\x50\x0E\x17\x91\xF6\x2F\x76\x4D\xD6\x8D\x43\xEF\xB0\x4D\xCC\xAA\x4D\x54\xE4\x96\x04\xDF\x9E\xD1\xB5\xE3\x4C\x6A\x88\x1B\xC1\x2C\x1F\xB8\x46\x65\x51\x7F\x9D\x5E\xEA\x04\x01\x8C\x35\x5D\xFA\x87\x74\x73\xFB\x0B\x41\x2E\xB3\x67\x1D\x5A\x92\xDB\xD2\x52\xE9\x10\x56\x33\x6D\xD6\x47\x13\x9A\xD7\x61\x8C\x37\xA1\x0C\x7A\x59\xF8\x14\x8E\xEB\x13\x3C\x89\xCE\xA9\x27\xEE\xB7\x61\xC9\x35\xE1\x1C\xE5\xED\x7A\x47\xB1\x3C\x9C\xD2\xDF\x59\x55\xF2\x73\x3F\x18\x14\xCE\x79\x73\xC7\x37\xBF\x53\xF7\xCD\xEA\x5F\xFD\xAA\x5B\xDF\x3D\x6F\x14\x78\x44\xDB\x86\xCA\xAF\xF3\x81\xB9\x68\xC4\x3E\x38\x24\x34\x2C\xC2\xA3\x40\x5F\x16\x1D\xC3\x72\xBC\xE2\x25\x0C\x28\x3C\x49\x8B\xFF\x0D\x95\x41\x39\xA8\x01\x71\x08\x0C\xB3\xDE\xD8\xB4\xE4\x9C\x64\x56\xC1\x90\x7B\xCB\x84\x61\xD5\x32\xB6\x70\x48\x6C\x5C\x74\xD0\xB8\x57\x42";
	const uint_32* pUint_256_2 = (uint_32*)"\x50\x51\xF4\xA7\x53\x7E\x41\x65\xC3\x1A\x17\xA4\x96\x3A\x27\x5E\xCB\x3B\xAB\x6B\xF1\x1F\x9D\x45\xAB\xAC\xFA\x58\x93\x4B\xE3\x03\x55\x20\x30\xFA\xF6\xAD\x76\x6D\x91\x88\xCC\x76\x25\xF5\x02\x4C\xFC\x4F\xE5\xD7\xD7\xC5\x2A\xCB\x80\x26\x35\x44\x8F\xB5\x62\xA3\x49\xDE\xB1\x5A\x67\x25\xBA\x1B\x98\x45\xEA\x0E\xE1\x5D\xFE\xC0\x02\xC3\x2F\x75\x12\x81\x4C\xF0\xA3\x8D\x46\x97\xC6\x6B\xD3\xF9\xE7\x03\x8F\x5F\x95\x15\x92\x9C\xEB\xBF\x6D\x7A\xDA\x95\x52\x59\x2D\xD4\xBE\x83\xD3\x58\x74\x21\x29\x49\xE0\x69\x44\x8E\xC9\xC8\x6A\x75\xC2\x89\x78\xF4\x8E\x79\x6B\x99\x58\x3E\xDD\x27\xB9\x71\xB6\xBE\xE1\x4F\x17\xF0\x88\xAD\x66\xC9\x20\xAC\xB4\x7D\xCE\x3A\x18\x63\xDF\x4A\x82\xE5\x1A\x31\x60\x97\x51\x33\x45\x62\x53\x7F\xE0\xB1\x64\x77\x84\xBB\x6B\xAE\x1C\xFE\x81\xA0\x94\xF9\x08\x2B\x58\x70\x48\x68\x19\x8F\x45\xFD\x87\x94\xDE\x6C\xB7\x52\x7B\xF8\x23\xAB\x73\xD3\xE2\x72\x4B\x02\x57\xE3\x1F\x8F\x2A\x66\x55\xAB\x07\xB2\xEB\x28\x03\x2F\xB5\xC2\x9A\x86\xC5\x7B\xA5\xD3\x37\x08\xF2\x30\x28\x87\xB2\x23\xBF\xA5\xBA\x02\x03\x6A\x5C\xED\x16\x82\x2B\x8A\xCF\x1C\x92\xA7\x79\xB4\xF0\xF3\x07\xF2\xA1\x4E\x69\xE2\xCD\x65\xDA\xF4\xD5\x06\x05\xBE\x1F\xD1\x34\x62\x8A\xC4\xA6\xFE\x9D\x34\x2E\x53\xA0\xA2\xF3\x55\x32\x05\x8A\xE1\x75\xA4\xF6\xEB\x39\x0B\x83\xEC\xAA\x40\x60\xEF\x06\x5E\x71\x9F\x51\xBD\x6E\x10\xF9\x3E\x21\x8A\x3D\x96\xDD\x06\xAE\xDD\x3E\x05\x46\x4D\xE6\xBD\xB5\x91\x54\x8D\x05\x71\xC4\x5D\x6F\x04\x06\xD4\xFF\x60\x50\x15\x24\x19\x98\xFB\x97\xD6\xBD\xE9\xCC\x89\x40\x43\x77\x67\xD9\x9E\xBD\xB0\xE8\x42\x88\x07\x89\x8B\x38\xE7\x19\x5B\xDB\x79\xC8\xEE\x47\xA1\x7C\x0A\xE9\x7C\x42\x0F\xC9\xF8\x84\x1E\x00\x00\x00\x00\x83\x09\x80\x86\x48\x32\x2B\xED\xAC\x1E\x11\x70\x4E\x6C\x5A\x72\xFB\xFD\x0E\xFF\x56\x0F\x85\x38\x1E\x3D\xAE\xD5\x27\x36\x2D\x39\x64\x0A\x0F\xD9\x21\x68\x5C\xA6\xD1\x9B\x5B\x54\x3A\x24\x36\x2E\xB1\x0C\x0A\x67\x0F\x93\x57\xE7\xD2\xB4\xEE\x96\x9E\x1B\x9B\x91\x4F\x80\xC0\xC5\xA2\x61\xDC\x20\x69\x5A\x77\x4B\x16\x1C\x12\x1A\x0A\xE2\x93\xBA\xE5\xC0\xA0\x2A\x43\x3C\x22\xE0\x1D\x12\x1B\x17\x0B\x0E\x09\x0D\xAD\xF2\x8B\xC7\xB9\x2D\xB6\xA8\xC8\x14\x1E\xA9\x85\x57\xF1\x19\x4C\xAF\x75\x07\xBB\xEE\x99\xDD\xFD\xA3\x7F\x60\x9F\xF7\x01\x26\xBC\x5C\x72\xF5\xC5\x44\x66\x3B\x34\x5B\xFB\x7E\x76\x8B\x43\x29\xDC\xCB\x23\xC6\x68\xB6\xED\xFC\x63\xB8\xE4\xF1\xCA\xD7\x31\xDC\x10\x42\x63\x85\x40\x13\x97\x22\x20\x84\xC6\x11\x7D\x85\x4A\x24\xF8\xD2\xBB\x3D\x11\xAE\xF9\x32\x6D\xC7\x29\xA1\x4B\x1D\x9E\x2F\xF3\xDC\xB2\x30\xEC\x0D\x86\x52\xD0\x77\xC1\xE3\x6C\x2B\xB3\x16\x99\xA9\x70\xB9\xFA\x11\x94\x48\x22\x47\xE9\x64\xC4\xA8\xFC\x8C\x1A\xA0\xF0\x3F\xD8\x56\x7D\x2C\xEF\x22\x33\x90\xC7\x87\x49\x4E\xC1\xD9\x38\xD1\xFE\x8C\xCA\xA2\x36\x98\xD4\x0B\xCF\xA6\xF5\x81\x28\xA5\x7A\xDE\x26\xDA\xB7\x8E\xA4\x3F\xAD\xBF\xE4\x2C\x3A\x9D\x0D\x50\x78\x92\x9B\x6A\x5F\xCC\x62\x54\x7E\x46\xC2\xF6\x8D\x13\xE8\x90\xD8\xB8\x5E\x2E\x39\xF7\xF5\x82\xC3\xAF\xBE\x9F\x5D\x80\x7C\x69\xD0\x93\xA9\x6F\xD5\x2D\xB3\xCF\x25\x12\x3B\xC8\xAC\x99\xA7\x10\x18\x7D\x6E\xE8\x9C\x63\x7B\xDB\x3B\xBB\x09\xCD\x26\x78\xF4\x6E\x59\x18\x01\xEC\x9A\xB7\xA8\x83\x4F\x9A\x65\xE6\x95\x6E\x7E\xAA\xFF\xE6\x08\x21\xBC\xCF\xE6\xEF\x15\xE8\xD9\xBA\xE7\x9B\xCE\x4A\x6F\x36\xD4\xEA\x9F\x09\xD6\x29\xB0\x7C\xAF\x31\xA4\xB2\x31\x2A\x3F\x23\x30\xC6\xA5\x94\xC0\x35\xA2\x66\x37\x74\x4E\xBC\xA6\xFC\x82\xCA\xB0\xE0\x90\xD0\x15\x33\xA7\xD8\x4A\xF1\x04\x98\xF7\x41\xEC\xDA\x0E\x7F\xCD\x50\x2F\x17\x91\xF6\x8D\x76\x4D\xD6\x4D\x43\xEF\xB0\x54\xCC\xAA\x4D\xDF\xE4\x96\x04\xE3\x9E\xD1\xB5\x1B\x4C\x6A\x88\xB8\xC1\x2C\x1F\x7F\x46\x65\x51\x04\x9D\x5E\xEA\x5D\x01\x8C\x35\x73\xFA\x87\x74\x2E\xFB\x0B\x41\x5A\xB3\x67\x1D\x52\x92\xDB\xD2\x33\xE9\x10\x56\x13\x6D\xD6\x47\x8C\x9A\xD7\x61\x7A\x37\xA1\x0C\x8E\x59\xF8\x14\x89\xEB\x13\x3C\xEE\xCE\xA9\x27\x35\xB7\x61\xC9\xED\xE1\x1C\xE5\x3C\x7A\x47\xB1\x59\x9C\xD2\xDF\x3F\x55\xF2\x73\x79\x18\x14\xCE\xBF\x73\xC7\x37\xEA\x53\xF7\xCD\x5B\x5F\xFD\xAA\x14\xDF\x3D\x6F\x86\x78\x44\xDB\x81\xCA\xAF\xF3\x3E\xB9\x68\xC4\x2C\x38\x24\x34\x5F\xC2\xA3\x40\x72\x16\x1D\xC3\x0C\xBC\xE2\x25\x8B\x28\x3C\x49\x41\xFF\x0D\x95\x71\x39\xA8\x01\xDE\x08\x0C\xB3\x9C\xD8\xB4\xE4\x90\x64\x56\xC1\x61\x7B\xCB\x84\x70\xD5\x32\xB6\x74\x48\x6C\x5C\x42\xD0\xB8\x57";
	const uint_32* pUint_256_3 = (uint_32*)"\xA7\x50\x51\xF4\x65\x53\x7E\x41\xA4\xC3\x1A\x17\x5E\x96\x3A\x27\x6B\xCB\x3B\xAB\x45\xF1\x1F\x9D\x58\xAB\xAC\xFA\x03\x93\x4B\xE3\xFA\x55\x20\x30\x6D\xF6\xAD\x76\x76\x91\x88\xCC\x4C\x25\xF5\x02\xD7\xFC\x4F\xE5\xCB\xD7\xC5\x2A\x44\x80\x26\x35\xA3\x8F\xB5\x62\x5A\x49\xDE\xB1\x1B\x67\x25\xBA\x0E\x98\x45\xEA\xC0\xE1\x5D\xFE\x75\x02\xC3\x2F\xF0\x12\x81\x4C\x97\xA3\x8D\x46\xF9\xC6\x6B\xD3\x5F\xE7\x03\x8F\x9C\x95\x15\x92\x7A\xEB\xBF\x6D\x59\xDA\x95\x52\x83\x2D\xD4\xBE\x21\xD3\x58\x74\x69\x29\x49\xE0\xC8\x44\x8E\xC9\x89\x6A\x75\xC2\x79\x78\xF4\x8E\x3E\x6B\x99\x58\x71\xDD\x27\xB9\x4F\xB6\xBE\xE1\xAD\x17\xF0\x88\xAC\x66\xC9\x20\x3A\xB4\x7D\xCE\x4A\x18\x63\xDF\x31\x82\xE5\x1A\x33\x60\x97\x51\x7F\x45\x62\x53\x77\xE0\xB1\x64\xAE\x84\xBB\x6B\xA0\x1C\xFE\x81\x2B\x94\xF9\x08\x68\x58\x70\x48\xFD\x19\x8F\x45\x6C\x87\x94\xDE\xF8\xB7\x52\x7B\xD3\x23\xAB\x73\x02\xE2\x72\x4B\x8F\x57\xE3\x1F\xAB\x2A\x66\x55\x28\x07\xB2\xEB\xC2\x03\x2F\xB5\x7B\x9A\x86\xC5\x08\xA5\xD3\x37\x87\xF2\x30\x28\xA5\xB2\x23\xBF\x6A\xBA\x02\x03\x82\x5C\xED\x16\x1C\x2B\x8A\xCF\xB4\x92\xA7\x79\xF2\xF0\xF3\x07\xE2\xA1\x4E\x69\xF4\xCD\x65\xDA\xBE\xD5\x06\x05\x62\x1F\xD1\x34\xFE\x8A\xC4\xA6\x53\x9D\x34\x2E\x55\xA0\xA2\xF3\xE1\x32\x05\x8A\xEB\x75\xA4\xF6\xEC\x39\x0B\x83\xEF\xAA\x40\x60\x9F\x06\x5E\x71\x10\x51\xBD\x6E\x8A\xF9\x3E\x21\x06\x3D\x96\xDD\x05\xAE\xDD\x3E\xBD\x46\x4D\xE6\x8D\xB5\x91\x54\x5D\x05\x71\xC4\xD4\x6F\x04\x06\x15\xFF\x60\x50\xFB\x24\x19\x98\xE9\x97\xD6\xBD\x43\xCC\x89\x40\x9E\x77\x67\xD9\x42\xBD\xB0\xE8\x8B\x88\x07\x89\x5B\x38\xE7\x19\xEE\xDB\x79\xC8\x0A\x47\xA1\x7C\x0F\xE9\x7C\x42\x1E\xC9\xF8\x84\x00\x00\x00\x00\x86\x83\x09\x80\xED\x48\x32\x2B\x70\xAC\x1E\x11\x72\x4E\x6C\x5A\xFF\xFB\xFD\x0E\x38\x56\x0F\x85\xD5\x1E\x3D\xAE\x39\x27\x36\x2D\xD9\x64\x0A\x0F\xA6\x21\x68\x5C\x54\xD1\x9B\x5B\x2E\x3A\x24\x36\x67\xB1\x0C\x0A\xE7\x0F\x93\x57\x96\xD2\xB4\xEE\x91\x9E\x1B\x9B\xC5\x4F\x80\xC0\x20\xA2\x61\xDC\x4B\x69\x5A\x77\x1A\x16\x1C\x12\xBA\x0A\xE2\x93\x2A\xE5\xC0\xA0\xE0\x43\x3C\x22\x17\x1D\x12\x1B\x0D\x0B\x0E\x09\xC7\xAD\xF2\x8B\xA8\xB9\x2D\xB6\xA9\xC8\x14\x1E\x19\x85\x57\xF1\x07\x4C\xAF\x75\xDD\xBB\xEE\x99\x60\xFD\xA3\x7F\x26\x9F\xF7\x01\xF5\xBC\x5C\x72\x3B\xC5\x44\x66\x7E\x34\x5B\xFB\x29\x76\x8B\x43\xC6\xDC\xCB\x23\xFC\x68\xB6\xED\xF1\x63\xB8\xE4\xDC\xCA\xD7\x31\x85\x10\x42\x63\x22\x40\x13\x97\x11\x20\x84\xC6\x24\x7D\x85\x4A\x3D\xF8\xD2\xBB\x32\x11\xAE\xF9\xA1\x6D\xC7\x29\x2F\x4B\x1D\x9E\x30\xF3\xDC\xB2\x52\xEC\x0D\x86\xE3\xD0\x77\xC1\x16\x6C\x2B\xB3\xB9\x99\xA9\x70\x48\xFA\x11\x94\x64\x22\x47\xE9\x8C\xC4\xA8\xFC\x3F\x1A\xA0\xF0\x2C\xD8\x56\x7D\x90\xEF\x22\x33\x4E\xC7\x87\x49\xD1\xC1\xD9\x38\xA2\xFE\x8C\xCA\x0B\x36\x98\xD4\x81\xCF\xA6\xF5\xDE\x28\xA5\x7A\x8E\x26\xDA\xB7\xBF\xA4\x3F\xAD\x9D\xE4\x2C\x3A\x92\x0D\x50\x78\xCC\x9B\x6A\x5F\x46\x62\x54\x7E\x13\xC2\xF6\x8D\xB8\xE8\x90\xD8\xF7\x5E\x2E\x39\xAF\xF5\x82\xC3\x80\xBE\x9F\x5D\x93\x7C\x69\xD0\x2D\xA9\x6F\xD5\x12\xB3\xCF\x25\x99\x3B\xC8\xAC\x7D\xA7\x10\x18\x63\x6E\xE8\x9C\xBB\x7B\xDB\x3B\x78\x09\xCD\x26\x18\xF4\x6E\x59\xB7\x01\xEC\x9A\x9A\xA8\x83\x4F\x6E\x65\xE6\x95\xE6\x7E\xAA\xFF\xCF\x08\x21\xBC\xE8\xE6\xEF\x15\x9B\xD9\xBA\xE7\x36\xCE\x4A\x6F\x09\xD4\xEA\x9F\x7C\xD6\x29\xB0\xB2\xAF\x31\xA4\x23\x31\x2A\x3F\x94\x30\xC6\xA5\x66\xC0\x35\xA2\xBC\x37\x74\x4E\xCA\xA6\xFC\x82\xD0\xB0\xE0\x90\xD8\x15\x33\xA7\x98\x4A\xF1\x04\xDA\xF7\x41\xEC\x50\x0E\x7F\xCD\xF6\x2F\x17\x91\xD6\x8D\x76\x4D\xB0\x4D\x43\xEF\x4D\x54\xCC\xAA\x04\xDF\xE4\x96\xB5\xE3\x9E\xD1\x88\x1B\x4C\x6A\x1F\xB8\xC1\x2C\x51\x7F\x46\x65\xEA\x04\x9D\x5E\x35\x5D\x01\x8C\x74\x73\xFA\x87\x41\x2E\xFB\x0B\x1D\x5A\xB3\x67\xD2\x52\x92\xDB\x56\x33\xE9\x10\x47\x13\x6D\xD6\x61\x8C\x9A\xD7\x0C\x7A\x37\xA1\x14\x8E\x59\xF8\x3C\x89\xEB\x13\x27\xEE\xCE\xA9\xC9\x35\xB7\x61\xE5\xED\xE1\x1C\xB1\x3C\x7A\x47\xDF\x59\x9C\xD2\x73\x3F\x55\xF2\xCE\x79\x18\x14\x37\xBF\x73\xC7\xCD\xEA\x53\xF7\xAA\x5B\x5F\xFD\x6F\x14\xDF\x3D\xDB\x86\x78\x44\xF3\x81\xCA\xAF\xC4\x3E\xB9\x68\x34\x2C\x38\x24\x40\x5F\xC2\xA3\xC3\x72\x16\x1D\x25\x0C\xBC\xE2\x49\x8B\x28\x3C\x95\x41\xFF\x0D\x01\x71\x39\xA8\xB3\xDE\x08\x0C\xE4\x9C\xD8\xB4\xC1\x90\x64\x56\x84\x61\x7B\xCB\xB6\x70\xD5\x32\x5C\x74\x48\x6C\x57\x42\xD0\xB8";
	const uint_32* pUint_256_4 = (uint_32*)"\xF4\xA7\x50\x51\x41\x65\x53\x7E\x17\xA4\xC3\x1A\x27\x5E\x96\x3A\xAB\x6B\xCB\x3B\x9D\x45\xF1\x1F\xFA\x58\xAB\xAC\xE3\x03\x93\x4B\x30\xFA\x55\x20\x76\x6D\xF6\xAD\xCC\x76\x91\x88\x02\x4C\x25\xF5\xE5\xD7\xFC\x4F\x2A\xCB\xD7\xC5\x35\x44\x80\x26\x62\xA3\x8F\xB5\xB1\x5A\x49\xDE\xBA\x1B\x67\x25\xEA\x0E\x98\x45\xFE\xC0\xE1\x5D\x2F\x75\x02\xC3\x4C\xF0\x12\x81\x46\x97\xA3\x8D\xD3\xF9\xC6\x6B\x8F\x5F\xE7\x03\x92\x9C\x95\x15\x6D\x7A\xEB\xBF\x52\x59\xDA\x95\xBE\x83\x2D\xD4\x74\x21\xD3\x58\xE0\x69\x29\x49\xC9\xC8\x44\x8E\xC2\x89\x6A\x75\x8E\x79\x78\xF4\x58\x3E\x6B\x99\xB9\x71\xDD\x27\xE1\x4F\xB6\xBE\x88\xAD\x17\xF0\x20\xAC\x66\xC9\xCE\x3A\xB4\x7D\xDF\x4A\x18\x63\x1A\x31\x82\xE5\x51\x33\x60\x97\x53\x7F\x45\x62\x64\x77\xE0\xB1\x6B\xAE\x84\xBB\x81\xA0\x1C\xFE\x08\x2B\x94\xF9\x48\x68\x58\x70\x45\xFD\x19\x8F\xDE\x6C\x87\x94\x7B\xF8\xB7\x52\x73\xD3\x23\xAB\x4B\x02\xE2\x72\x1F\x8F\x57\xE3\x55\xAB\x2A\x66\xEB\x28\x07\xB2\xB5\xC2\x03\x2F\xC5\x7B\x9A\x86\x37\x08\xA5\xD3\x28\x87\xF2\x30\xBF\xA5\xB2\x23\x03\x6A\xBA\x02\x16\x82\x5C\xED\xCF\x1C\x2B\x8A\x79\xB4\x92\xA7\x07\xF2\xF0\xF3\x69\xE2\xA1\x4E\xDA\xF4\xCD\x65\x05\xBE\xD5\x06\x34\x62\x1F\xD1\xA6\xFE\x8A\xC4\x2E\x53\x9D\x34\xF3\x55\xA0\xA2\x8A\xE1\x32\x05\xF6\xEB\x75\xA4\x83\xEC\x39\x0B\x60\xEF\xAA\x40\x71\x9F\x06\x5E\x6E\x10\x51\xBD\x21\x8A\xF9\x3E\xDD\x06\x3D\x96\x3E\x05\xAE\xDD\xE6\xBD\x46\x4D\x54\x8D\xB5\x91\xC4\x5D\x05\x71\x06\xD4\x6F\x04\x50\x15\xFF\x60\x98\xFB\x24\x19\xBD\xE9\x97\xD6\x40\x43\xCC\x89\xD9\x9E\x77\x67\xE8\x42\xBD\xB0\x89\x8B\x88\x07\x19\x5B\x38\xE7\xC8\xEE\xDB\x79\x7C\x0A\x47\xA1\x42\x0F\xE9\x7C\x84\x1E\xC9\xF8\x00\x00\x00\x00\x80\x86\x83\x09\x2B\xED\x48\x32\x11\x70\xAC\x1E\x5A\x72\x4E\x6C\x0E\xFF\xFB\xFD\x85\x38\x56\x0F\xAE\xD5\x1E\x3D\x2D\x39\x27\x36\x0F\xD9\x64\x0A\x5C\xA6\x21\x68\x5B\x54\xD1\x9B\x36\x2E\x3A\x24\x0A\x67\xB1\x0C\x57\xE7\x0F\x93\xEE\x96\xD2\xB4\x9B\x91\x9E\x1B\xC0\xC5\x4F\x80\xDC\x20\xA2\x61\x77\x4B\x69\x5A\x12\x1A\x16\x1C\x93\xBA\x0A\xE2\xA0\x2A\xE5\xC0\x22\xE0\x43\x3C\x1B\x17\x1D\x12\x09\x0D\x0B\x0E\x8B\xC7\xAD\xF2\xB6\xA8\xB9\x2D\x1E\xA9\xC8\x14\xF1\x19\x85\x57\x75\x07\x4C\xAF\x99\xDD\xBB\xEE\x7F\x60\xFD\xA3\x01\x26\x9F\xF7\x72\xF5\xBC\x5C\x66\x3B\xC5\x44\xFB\x7E\x34\x5B\x43\x29\x76\x8B\x23\xC6\xDC\xCB\xED\xFC\x68\xB6\xE4\xF1\x63\xB8\x31\xDC\xCA\xD7\x63\x85\x10\x42\x97\x22\x40\x13\xC6\x11\x20\x84\x4A\x24\x7D\x85\xBB\x3D\xF8\xD2\xF9\x32\x11\xAE\x29\xA1\x6D\xC7\x9E\x2F\x4B\x1D\xB2\x30\xF3\xDC\x86\x52\xEC\x0D\xC1\xE3\xD0\x77\xB3\x16\x6C\x2B\x70\xB9\x99\xA9\x94\x48\xFA\x11\xE9\x64\x22\x47\xFC\x8C\xC4\xA8\xF0\x3F\x1A\xA0\x7D\x2C\xD8\x56\x33\x90\xEF\x22\x49\x4E\xC7\x87\x38\xD1\xC1\xD9\xCA\xA2\xFE\x8C\xD4\x0B\x36\x98\xF5\x81\xCF\xA6\x7A\xDE\x28\xA5\xB7\x8E\x26\xDA\xAD\xBF\xA4\x3F\x3A\x9D\xE4\x2C\x78\x92\x0D\x50\x5F\xCC\x9B\x6A\x7E\x46\x62\x54\x8D\x13\xC2\xF6\xD8\xB8\xE8\x90\x39\xF7\x5E\x2E\xC3\xAF\xF5\x82\x5D\x80\xBE\x9F\xD0\x93\x7C\x69\xD5\x2D\xA9\x6F\x25\x12\xB3\xCF\xAC\x99\x3B\xC8\x18\x7D\xA7\x10\x9C\x63\x6E\xE8\x3B\xBB\x7B\xDB\x26\x78\x09\xCD\x59\x18\xF4\x6E\x9A\xB7\x01\xEC\x4F\x9A\xA8\x83\x95\x6E\x65\xE6\xFF\xE6\x7E\xAA\xBC\xCF\x08\x21\x15\xE8\xE6\xEF\xE7\x9B\xD9\xBA\x6F\x36\xCE\x4A\x9F\x09\xD4\xEA\xB0\x7C\xD6\x29\xA4\xB2\xAF\x31\x3F\x23\x31\x2A\xA5\x94\x30\xC6\xA2\x66\xC0\x35\x4E\xBC\x37\x74\x82\xCA\xA6\xFC\x90\xD0\xB0\xE0\xA7\xD8\x15\x33\x04\x98\x4A\xF1\xEC\xDA\xF7\x41\xCD\x50\x0E\x7F\x91\xF6\x2F\x17\x4D\xD6\x8D\x76\xEF\xB0\x4D\x43\xAA\x4D\x54\xCC\x96\x04\xDF\xE4\xD1\xB5\xE3\x9E\x6A\x88\x1B\x4C\x2C\x1F\xB8\xC1\x65\x51\x7F\x46\x5E\xEA\x04\x9D\x8C\x35\x5D\x01\x87\x74\x73\xFA\x0B\x41\x2E\xFB\x67\x1D\x5A\xB3\xDB\xD2\x52\x92\x10\x56\x33\xE9\xD6\x47\x13\x6D\xD7\x61\x8C\x9A\xA1\x0C\x7A\x37\xF8\x14\x8E\x59\x13\x3C\x89\xEB\xA9\x27\xEE\xCE\x61\xC9\x35\xB7\x1C\xE5\xED\xE1\x47\xB1\x3C\x7A\xD2\xDF\x59\x9C\xF2\x73\x3F\x55\x14\xCE\x79\x18\xC7\x37\xBF\x73\xF7\xCD\xEA\x53\xFD\xAA\x5B\x5F\x3D\x6F\x14\xDF\x44\xDB\x86\x78\xAF\xF3\x81\xCA\x68\xC4\x3E\xB9\x24\x34\x2C\x38\xA3\x40\x5F\xC2\x1D\xC3\x72\x16\xE2\x25\x0C\xBC\x3C\x49\x8B\x28\x0D\x95\x41\xFF\xA8\x01\x71\x39\x0C\xB3\xDE\x08\xB4\xE4\x9C\xD8\x56\xC1\x90\x64\xCB\x84\x61\x7B\x32\xB6\x70\xD5\x6C\x5C\x74\x48\xB8\x57\x42\xD0";
	const uint_8* bTab_256 = (const uint_8*)"\x52\x09\x6A\xD5\x30\x36\xA5\x38\xBF\x40\xA3\x9E\x81\xF3\xD7\xFB\x7C\xE3\x39\x82\x9B\x2F\xFF\x87\x34\x8E\x43\x44\xC4\xDE\xE9\xCB\x54\x7B\x94\x32\xA6\xC2\x23\x3D\xEE\x4C\x95\x0B\x42\xFA\xC3\x4E\x08\x2E\xA1\x66\x28\xD9\x24\xB2\x76\x5B\xA2\x49\x6D\x8B\xD1\x25\x72\xF8\xF6\x64\x86\x68\x98\x16\xD4\xA4\x5C\xCC\x5D\x65\xB6\x92\x6C\x70\x48\x50\xFD\xED\xB9\xDA\x5E\x15\x46\x57\xA7\x8D\x9D\x84\x90\xD8\xAB\x00\x8C\xBC\xD3\x0A\xF7\xE4\x58\x05\xB8\xB3\x45\x06\xD0\x2C\x1E\x8F\xCA\x3F\x0F\x02\xC1\xAF\xBD\x03\x01\x13\x8A\x6B\x3A\x91\x11\x41\x4F\x67\xDC\xEA\x97\xF2\xCF\xCE\xF0\xB4\xE6\x73\x96\xAC\x74\x22\xE7\xAD\x35\x85\xE2\xF9\x37\xE8\x1C\x75\xDF\x6E\x47\xF1\x1A\x71\x1D\x29\xC5\x89\x6F\xB7\x62\x0E\xAA\x18\xBE\x1B\xFC\x56\x3E\x4B\xC6\xD2\x79\x20\x9A\xDB\xC0\xFE\x78\xCD\x5A\xF4\x1F\xDD\xA8\x33\x88\x07\xC7\x31\xB1\x12\x10\x59\x27\x80\xEC\x5F\x60\x51\x7F\xA9\x19\xB5\x4A\x0D\x2D\xE5\x7A\x9F\x93\xC9\x9C\xEF\xA0\xE0\x3B\x4D\xAE\x2A\xF5\xB0\xC8\xEB\xBB\x3C\x83\x53\x99\x61\x17\x2B\x04\x7E\xBA\x77\xD6\x26\xE1\x69\x14\x63\x55\x21\x0C\x7D";
	uint_8 key_1[4][4] = { 0,13,10,7,
							4,1,14,11,
							8,5,2,15,
							12,9,6,3 };
	uint_8 key_2[4][4] = { 12,1,6,11,
							8,13,2,7,
							4,9,14,3,
							0,5,10,15 };
public:
	void aes_ctr_encode(uint_8* pblock, int cnt);
	void aes_ctr_decode(uint_8* pblock, int cnt);
	void aes_256_encode(uint_8* pblock);
	void aes_256_decode(uint_8* pblock);
	void ase_fdb_256x4_encode(uint_8* pblock);
	void ase_fdb_256x4_decode(uint_8* pblock);
	void mix_encode(uint_8* pblock);
	void mix_decode(uint_8* pblock);
	//uint_8* EncriptXmlFile(string path, uint_32& size);
};




void AES::ase_fdb_256x4_encode(uint_8* pblock)
{
	uint_32 temp;
	uint_32 temp1 = 0;
	uint_32 temp_arr[4]{};
	uint_32 t1 = 0;
	uint_32 t2 = 0;
	uint_32 t3 = 0;
	uint_32 t4 = 0;
	uint_32 flag = 0;
	memcpy(temp_arr, pblock, 16);
	int k = 0;
	for (int i = 0;i < 4;i++)
	{
		temp = temp_arr[3 - i];
		temp ^= pUint_44[4 + i];
		temp1 = 0;
		flag = 0;
		for (int a = 0;a < 256;a++)
		{
			t1 = temp1;
			temp1 ^= pUint_256_1[a];
			for (int b = 0;b < 256;b++)
			{
				t2 = temp1;
				temp1 ^= pUint_256_2[b];
				for (int c = 0;c < 256;c++)
				{
					t3 = temp1;
					temp1 ^= pUint_256_3[c];
					for (int d = 0;d < 256;d++)
					{
						t4 = temp1;
						temp1 ^= pUint_256_4[d];
						if (temp1 == temp)
						{
							flag = 1;
							pblock[key_1[i][3]] = d;
							break;
						}
						temp1 = t4;
					}
					if (flag)
					{
						pblock[key_1[i][2]] = c;
						break;
					}
					temp1 = t3;
				}
				if (flag)
				{
					pblock[key_1[i][1]] = b;
					break;
				}
				temp1 = t2;
			}
			if (flag)
			{
				pblock[key_1[i][0]] = a;
				break;
			}
			temp1 = t1;
		}
	}
}

void AES::ase_fdb_256x4_decode(uint_8* pblock)
{
	uint_32 temp = 0;
	uint_32 temp_arr[4]{};
	for (int i = 0;i < 4;i++)
	{
		temp = pUint_256_1[pblock[key_1[i][0]]] ^ pUint_256_2[pblock[key_1[i][1]]] ^ pUint_256_3[pblock[key_1[i][2]]] ^ pUint_256_4[pblock[key_1[i][3]]];
		temp ^= pUint_44[4 + i];
		temp_arr[3 - i] = temp;
	}
	memcpy(pblock, temp_arr, 16);
}

void AES::mix_encode(uint_8* pblock)
{
	aes_256_encode(pblock);
	ase_fdb_256x4_encode(pblock);
	for (int i = 2;i < 6;i++)
	{
		aes_ctr_encode(pblock, i);
	}

	uint_32 temp;
	for (int i = 0;i < 4;i++)
	{
		*(uint_32*)(pblock + 4 * i) = *(uint_32*)(pblock + 4 * i) ^ pUint_44[4 * 0xA + i];
	}
}

void AES::mix_decode(uint_8* pblock)
{
	uint_32 temp;
	for (int i = 0;i < 4;i++)
	{
		*(uint_32*)(pblock + 4 * i) = *(uint_32*)(pblock + 4 * i) ^ pUint_44[4 * 0xA + i];
	}

	for (int i = 5;i > 1;i--)
	{
		aes_ctr_decode(pblock, i);
	}
	ase_fdb_256x4_decode(pblock);
	aes_256_decode(pblock);
}

void AES::aes_ctr_decode(uint_8* pblock, int cnt)
{
	uint_32 temp;
	uint_32 temp_arr[4]{};
	for (int i = 0;i < 4;i++)
	{
		temp = pUint_256_1[pblock[key_1[i][0]]] ^ pUint_256_2[pblock[key_1[i][1]]] ^ pUint_256_3[pblock[key_1[i][2]]] ^ pUint_256_4[pblock[key_1[i][3]]];
		temp ^= pUint_44[8 * cnt - 4 + i];
		temp_arr[3 - i] = temp;
	}
	uint_8* pnew_block = (uint_8*)temp_arr;

	for (int i = 0;i < 4;i++)
	{
		temp = pUint_256_1[pnew_block[key_2[i][0]]] ^ pUint_256_2[pnew_block[key_2[i][1]]] ^ pUint_256_3[pnew_block[key_2[i][2]]] ^ pUint_256_4[pnew_block[key_2[i][3]]];
		temp ^= pUint_44[8 * cnt - 8 + i];
		*(uint_32*)(pblock + 4 * i) = temp;
	}
}

void AES::aes_ctr_encode(uint_8* pblock, int cnt)
{
	uint_32 temp;
	uint_32 temp1;
	uint_32 temp_arr[4]{};
	uint_32 t1 = 0;
	uint_32 t2 = 0;
	uint_32 t3 = 0;
	uint_32 t4 = 0;
	uint_32 flag = 0;
	uint_8* pnew_block = new uint_8[16]{};
	for (int i = 0;i < 4;i++)
	{
		temp = *(uint_32*)(pblock + 4 * i);
		temp ^= pUint_44[8 * cnt - 8 + i];
		temp1 = 0;
		flag = 0;
		for (int a = 0;a < 256;a++)
		{
			t1 = temp1;
			temp1 ^= pUint_256_1[a];
			for (int b = 0;b < 256;b++)
			{
				t2 = temp1;
				temp1 ^= pUint_256_2[b];
				for (int c = 0;c < 256;c++)
				{
					t3 = temp1;
					temp1 ^= pUint_256_3[c];
					for (int d = 0;d < 256;d++)
					{
						t4 = temp1;
						temp1 ^= pUint_256_4[d];
						if (temp1 == temp)
						{
							flag = 1;
							pnew_block[key_2[i][3]] = d;
							break;
						}
						temp1 = t4;
					}
					if (flag)
					{
						pnew_block[key_2[i][2]] = c;
						break;
					}
					temp1 = t3;
				}
				if (flag)
				{
					pnew_block[key_2[i][1]] = b;
					break;
				}
				temp1 = t2;
			}
			if (flag)
			{
				pnew_block[key_2[i][0]] = a;
				break;
			}
			temp1 = t1;
		}
	}


	memcpy(temp_arr, pnew_block, 16);
	for (int i = 0;i < 4;i++)
	{
		temp = temp_arr[3 - i];
		temp ^= pUint_44[8 * cnt - 4 + i];
		temp1 = 0;
		flag = 0;
		for (int a = 0;a < 256;a++)
		{
			t1 = temp1;
			temp1 ^= pUint_256_1[a];
			for (int b = 0;b < 256;b++)
			{
				t2 = temp1;
				temp1 ^= pUint_256_2[b];
				for (int c = 0;c < 256;c++)
				{
					t3 = temp1;
					temp1 ^= pUint_256_3[c];
					for (int d = 0;d < 256;d++)
					{
						t4 = temp1;
						temp1 ^= pUint_256_4[d];
						if (temp1 == temp)
						{
							flag = 1;
							pblock[key_1[i][3]] = d;
							break;
						}
						temp1 = t4;
					}
					if (flag)
					{
						pblock[key_1[i][2]] = c;
						break;
					}
					temp1 = t3;
				}
				if (flag)
				{
					pblock[key_1[i][1]] = b;
					break;
				}
				temp1 = t2;
			}
			if (flag)
			{
				pblock[key_1[i][0]] = a;
				break;
			}
			temp1 = t1;
		}
	}
}

void AES::aes_256_decode(uint_8* pblock)
{
	uint_8* new_block = new uint_8[16]{};
	uint_32 temp;
	uint_8 tempX = 0;
	for (int i = 0;i < 4;i++)
	{
		temp = 0;
		for (int j = 0;j < 4;j++)
		{
			tempX = bTab_256[pblock[key_2[i][j]]];
			temp += tempX << (8 * j);
		}
		temp ^= pUint_44[i];
		*(uint_32*)(new_block + 4 * i) = temp;
	}
	memcpy(pblock, new_block, 16);
	delete[] new_block;
}

void AES::aes_256_encode(uint_8* pblock)
{
	uint_8* new_block = new uint_8[16]{};
	uint_32 temp;
	uint_8* tempX = 0;
	for (int i = 0;i < 4;i++)
	{
		temp = *(uint_32*)(pblock + 4 * i);
		temp ^= pUint_44[i];
		tempX = (uint_8*)&temp;
		for (int j = 0;j < 4;j++)
		{
			int k = 0;
			while (true)
			{
				if (bTab_256[k] == tempX[j])
				{
					break;
				}
				k++;
			}
			new_block[key_2[i][j]] = k;
		}
	}
	memcpy(pblock, new_block, 16);
	delete[] new_block;
}


//uint_8* AES::EncriptXmlFile(string path, uint_32& size)
//{
//	FILE* fp = fopen(path.c_str(), "rb");
//	fseek(fp, 0, SEEK_END);
//	uint_32 file_size = ftell(fp);
//	fseek(fp, 0, SEEK_SET);
//	uint_8* pdec = new uint_8[file_size];
//	fread(pdec, 1, file_size, fp);
//	uint_8* presult = pdec;
//	uint_32 i = 0;
//	for (i = 0;i < file_size / 16;i++)
//	{
//		mix_decode(pdec);
//		pdec += 16;
//	}
//	size = file_size;
//	return presult;
//}

int main()
{
	AES xx;
	uint_8* buff = new uint_8[16];
	memcpy(buff, "\x00\x11\x22\x33\x44\x55\x66\x77\x88\x99\xaa\xbb\xcc\xdd\xee\xff", 16);

	xx.mix_encode(buff);

	xx.mix_decode(buff);

	return 0;
}