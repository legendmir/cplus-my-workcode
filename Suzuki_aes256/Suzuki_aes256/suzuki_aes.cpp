#include<stdio.h>
#include <windows.h>


typedef unsigned int uint_32;
typedef unsigned __int8 uint_8;
typedef unsigned __int16 uint_16;


const uint_32* tab256_0 = (uint_32*)"\xA5\x63\x63\xC6\x84\x7C\x7C\xF8\x99\x77\x77\xEE\x8D\x7B\x7B\xF6\x0D\xF2\xF2\xFF\xBD\x6B\x6B\xD6\xB1\x6F\x6F\xDE\x54\xC5\xC5\x91\x50\x30\x30\x60\x03\x01\x01\x02\xA9\x67\x67\xCE\x7D\x2B\x2B\x56\x19\xFE\xFE\xE7\x62\xD7\xD7\xB5\xE6\xAB\xAB\x4D\x9A\x76\x76\xEC\x45\xCA\xCA\x8F\x9D\x82\x82\x1F\x40\xC9\xC9\x89\x87\x7D\x7D\xFA\x15\xFA\xFA\xEF\xEB\x59\x59\xB2\xC9\x47\x47\x8E\x0B\xF0\xF0\xFB\xEC\xAD\xAD\x41\x67\xD4\xD4\xB3\xFD\xA2\xA2\x5F\xEA\xAF\xAF\x45\xBF\x9C\x9C\x23\xF7\xA4\xA4\x53\x96\x72\x72\xE4\x5B\xC0\xC0\x9B\xC2\xB7\xB7\x75\x1C\xFD\xFD\xE1\xAE\x93\x93\x3D\x6A\x26\x26\x4C\x5A\x36\x36\x6C\x41\x3F\x3F\x7E\x02\xF7\xF7\xF5\x4F\xCC\xCC\x83\x5C\x34\x34\x68\xF4\xA5\xA5\x51\x34\xE5\xE5\xD1\x08\xF1\xF1\xF9\x93\x71\x71\xE2\x73\xD8\xD8\xAB\x53\x31\x31\x62\x3F\x15\x15\x2A\x0C\x04\x04\x08\x52\xC7\xC7\x95\x65\x23\x23\x46\x5E\xC3\xC3\x9D\x28\x18\x18\x30\xA1\x96\x96\x37\x0F\x05\x05\x0A\xB5\x9A\x9A\x2F\x09\x07\x07\x0E\x36\x12\x12\x24\x9B\x80\x80\x1B\x3D\xE2\xE2\xDF\x26\xEB\xEB\xCD\x69\x27\x27\x4E\xCD\xB2\xB2\x7F\x9F\x75\x75\xEA\x1B\x09\x09\x12\x9E\x83\x83\x1D\x74\x2C\x2C\x58\x2E\x1A\x1A\x34\x2D\x1B\x1B\x36\xB2\x6E\x6E\xDC\xEE\x5A\x5A\xB4\xFB\xA0\xA0\x5B\xF6\x52\x52\xA4\x4D\x3B\x3B\x76\x61\xD6\xD6\xB7\xCE\xB3\xB3\x7D\x7B\x29\x29\x52\x3E\xE3\xE3\xDD\x71\x2F\x2F\x5E\x97\x84\x84\x13\xF5\x53\x53\xA6\x68\xD1\xD1\xB9\x00\x00\x00\x00\x2C\xED\xED\xC1\x60\x20\x20\x40\x1F\xFC\xFC\xE3\xC8\xB1\xB1\x79\xED\x5B\x5B\xB6\xBE\x6A\x6A\xD4\x46\xCB\xCB\x8D\xD9\xBE\xBE\x67\x4B\x39\x39\x72\xDE\x4A\x4A\x94\xD4\x4C\x4C\x98\xE8\x58\x58\xB0\x4A\xCF\xCF\x85\x6B\xD0\xD0\xBB\x2A\xEF\xEF\xC5\xE5\xAA\xAA\x4F\x16\xFB\xFB\xED\xC5\x43\x43\x86\xD7\x4D\x4D\x9A\x55\x33\x33\x66\x94\x85\x85\x11\xCF\x45\x45\x8A\x10\xF9\xF9\xE9\x06\x02\x02\x04\x81\x7F\x7F\xFE\xF0\x50\x50\xA0\x44\x3C\x3C\x78\xBA\x9F\x9F\x25\xE3\xA8\xA8\x4B\xF3\x51\x51\xA2\xFE\xA3\xA3\x5D\xC0\x40\x40\x80\x8A\x8F\x8F\x05\xAD\x92\x92\x3F\xBC\x9D\x9D\x21\x48\x38\x38\x70\x04\xF5\xF5\xF1\xDF\xBC\xBC\x63\xC1\xB6\xB6\x77\x75\xDA\xDA\xAF\x63\x21\x21\x42\x30\x10\x10\x20\x1A\xFF\xFF\xE5\x0E\xF3\xF3\xFD\x6D\xD2\xD2\xBF\x4C\xCD\xCD\x81\x14\x0C\x0C\x18\x35\x13\x13\x26\x2F\xEC\xEC\xC3\xE1\x5F\x5F\xBE\xA2\x97\x97\x35\xCC\x44\x44\x88\x39\x17\x17\x2E\x57\xC4\xC4\x93\xF2\xA7\xA7\x55\x82\x7E\x7E\xFC\x47\x3D\x3D\x7A\xAC\x64\x64\xC8\xE7\x5D\x5D\xBA\x2B\x19\x19\x32\x95\x73\x73\xE6\xA0\x60\x60\xC0\x98\x81\x81\x19\xD1\x4F\x4F\x9E\x7F\xDC\xDC\xA3\x66\x22\x22\x44\x7E\x2A\x2A\x54\xAB\x90\x90\x3B\x83\x88\x88\x0B\xCA\x46\x46\x8C\x29\xEE\xEE\xC7\xD3\xB8\xB8\x6B\x3C\x14\x14\x28\x79\xDE\xDE\xA7\xE2\x5E\x5E\xBC\x1D\x0B\x0B\x16\x76\xDB\xDB\xAD\x3B\xE0\xE0\xDB\x56\x32\x32\x64\x4E\x3A\x3A\x74\x1E\x0A\x0A\x14\xDB\x49\x49\x92\x0A\x06\x06\x0C\x6C\x24\x24\x48\xE4\x5C\x5C\xB8\x5D\xC2\xC2\x9F\x6E\xD3\xD3\xBD\xEF\xAC\xAC\x43\xA6\x62\x62\xC4\xA8\x91\x91\x39\xA4\x95\x95\x31\x37\xE4\xE4\xD3\x8B\x79\x79\xF2\x32\xE7\xE7\xD5\x43\xC8\xC8\x8B\x59\x37\x37\x6E\xB7\x6D\x6D\xDA\x8C\x8D\x8D\x01\x64\xD5\xD5\xB1\xD2\x4E\x4E\x9C\xE0\xA9\xA9\x49\xB4\x6C\x6C\xD8\xFA\x56\x56\xAC\x07\xF4\xF4\xF3\x25\xEA\xEA\xCF\xAF\x65\x65\xCA\x8E\x7A\x7A\xF4\xE9\xAE\xAE\x47\x18\x08\x08\x10\xD5\xBA\xBA\x6F\x88\x78\x78\xF0\x6F\x25\x25\x4A\x72\x2E\x2E\x5C\x24\x1C\x1C\x38\xF1\xA6\xA6\x57\xC7\xB4\xB4\x73\x51\xC6\xC6\x97\x23\xE8\xE8\xCB\x7C\xDD\xDD\xA1\x9C\x74\x74\xE8\x21\x1F\x1F\x3E\xDD\x4B\x4B\x96\xDC\xBD\xBD\x61\x86\x8B\x8B\x0D\x85\x8A\x8A\x0F\x90\x70\x70\xE0\x42\x3E\x3E\x7C\xC4\xB5\xB5\x71\xAA\x66\x66\xCC\xD8\x48\x48\x90\x05\x03\x03\x06\x01\xF6\xF6\xF7\x12\x0E\x0E\x1C\xA3\x61\x61\xC2\x5F\x35\x35\x6A\xF9\x57\x57\xAE\xD0\xB9\xB9\x69\x91\x86\x86\x17\x58\xC1\xC1\x99\x27\x1D\x1D\x3A\xB9\x9E\x9E\x27\x38\xE1\xE1\xD9\x13\xF8\xF8\xEB\xB3\x98\x98\x2B\x33\x11\x11\x22\xBB\x69\x69\xD2\x70\xD9\xD9\xA9\x89\x8E\x8E\x07\xA7\x94\x94\x33\xB6\x9B\x9B\x2D\x22\x1E\x1E\x3C\x92\x87\x87\x15\x20\xE9\xE9\xC9\x49\xCE\xCE\x87\xFF\x55\x55\xAA\x78\x28\x28\x50\x7A\xDF\xDF\xA5\x8F\x8C\x8C\x03\xF8\xA1\xA1\x59\x80\x89\x89\x09\x17\x0D\x0D\x1A\xDA\xBF\xBF\x65\x31\xE6\xE6\xD7\xC6\x42\x42\x84\xB8\x68\x68\xD0\xC3\x41\x41\x82\xB0\x99\x99\x29\x77\x2D\x2D\x5A\x11\x0F\x0F\x1E\xCB\xB0\xB0\x7B\xFC\x54\x54\xA8\xD6\xBB\xBB\x6D\x3A\x16\x16\x2C";
const uint_32* tab256_1 = (uint_32*)"\x63\x63\xC6\xA5\x7C\x7C\xF8\x84\x77\x77\xEE\x99\x7B\x7B\xF6\x8D\xF2\xF2\xFF\x0D\x6B\x6B\xD6\xBD\x6F\x6F\xDE\xB1\xC5\xC5\x91\x54\x30\x30\x60\x50\x01\x01\x02\x03\x67\x67\xCE\xA9\x2B\x2B\x56\x7D\xFE\xFE\xE7\x19\xD7\xD7\xB5\x62\xAB\xAB\x4D\xE6\x76\x76\xEC\x9A\xCA\xCA\x8F\x45\x82\x82\x1F\x9D\xC9\xC9\x89\x40\x7D\x7D\xFA\x87\xFA\xFA\xEF\x15\x59\x59\xB2\xEB\x47\x47\x8E\xC9\xF0\xF0\xFB\x0B\xAD\xAD\x41\xEC\xD4\xD4\xB3\x67\xA2\xA2\x5F\xFD\xAF\xAF\x45\xEA\x9C\x9C\x23\xBF\xA4\xA4\x53\xF7\x72\x72\xE4\x96\xC0\xC0\x9B\x5B\xB7\xB7\x75\xC2\xFD\xFD\xE1\x1C\x93\x93\x3D\xAE\x26\x26\x4C\x6A\x36\x36\x6C\x5A\x3F\x3F\x7E\x41\xF7\xF7\xF5\x02\xCC\xCC\x83\x4F\x34\x34\x68\x5C\xA5\xA5\x51\xF4\xE5\xE5\xD1\x34\xF1\xF1\xF9\x08\x71\x71\xE2\x93\xD8\xD8\xAB\x73\x31\x31\x62\x53\x15\x15\x2A\x3F\x04\x04\x08\x0C\xC7\xC7\x95\x52\x23\x23\x46\x65\xC3\xC3\x9D\x5E\x18\x18\x30\x28\x96\x96\x37\xA1\x05\x05\x0A\x0F\x9A\x9A\x2F\xB5\x07\x07\x0E\x09\x12\x12\x24\x36\x80\x80\x1B\x9B\xE2\xE2\xDF\x3D\xEB\xEB\xCD\x26\x27\x27\x4E\x69\xB2\xB2\x7F\xCD\x75\x75\xEA\x9F\x09\x09\x12\x1B\x83\x83\x1D\x9E\x2C\x2C\x58\x74\x1A\x1A\x34\x2E\x1B\x1B\x36\x2D\x6E\x6E\xDC\xB2\x5A\x5A\xB4\xEE\xA0\xA0\x5B\xFB\x52\x52\xA4\xF6\x3B\x3B\x76\x4D\xD6\xD6\xB7\x61\xB3\xB3\x7D\xCE\x29\x29\x52\x7B\xE3\xE3\xDD\x3E\x2F\x2F\x5E\x71\x84\x84\x13\x97\x53\x53\xA6\xF5\xD1\xD1\xB9\x68\x00\x00\x00\x00\xED\xED\xC1\x2C\x20\x20\x40\x60\xFC\xFC\xE3\x1F\xB1\xB1\x79\xC8\x5B\x5B\xB6\xED\x6A\x6A\xD4\xBE\xCB\xCB\x8D\x46\xBE\xBE\x67\xD9\x39\x39\x72\x4B\x4A\x4A\x94\xDE\x4C\x4C\x98\xD4\x58\x58\xB0\xE8\xCF\xCF\x85\x4A\xD0\xD0\xBB\x6B\xEF\xEF\xC5\x2A\xAA\xAA\x4F\xE5\xFB\xFB\xED\x16\x43\x43\x86\xC5\x4D\x4D\x9A\xD7\x33\x33\x66\x55\x85\x85\x11\x94\x45\x45\x8A\xCF\xF9\xF9\xE9\x10\x02\x02\x04\x06\x7F\x7F\xFE\x81\x50\x50\xA0\xF0\x3C\x3C\x78\x44\x9F\x9F\x25\xBA\xA8\xA8\x4B\xE3\x51\x51\xA2\xF3\xA3\xA3\x5D\xFE\x40\x40\x80\xC0\x8F\x8F\x05\x8A\x92\x92\x3F\xAD\x9D\x9D\x21\xBC\x38\x38\x70\x48\xF5\xF5\xF1\x04\xBC\xBC\x63\xDF\xB6\xB6\x77\xC1\xDA\xDA\xAF\x75\x21\x21\x42\x63\x10\x10\x20\x30\xFF\xFF\xE5\x1A\xF3\xF3\xFD\x0E\xD2\xD2\xBF\x6D\xCD\xCD\x81\x4C\x0C\x0C\x18\x14\x13\x13\x26\x35\xEC\xEC\xC3\x2F\x5F\x5F\xBE\xE1\x97\x97\x35\xA2\x44\x44\x88\xCC\x17\x17\x2E\x39\xC4\xC4\x93\x57\xA7\xA7\x55\xF2\x7E\x7E\xFC\x82\x3D\x3D\x7A\x47\x64\x64\xC8\xAC\x5D\x5D\xBA\xE7\x19\x19\x32\x2B\x73\x73\xE6\x95\x60\x60\xC0\xA0\x81\x81\x19\x98\x4F\x4F\x9E\xD1\xDC\xDC\xA3\x7F\x22\x22\x44\x66\x2A\x2A\x54\x7E\x90\x90\x3B\xAB\x88\x88\x0B\x83\x46\x46\x8C\xCA\xEE\xEE\xC7\x29\xB8\xB8\x6B\xD3\x14\x14\x28\x3C\xDE\xDE\xA7\x79\x5E\x5E\xBC\xE2\x0B\x0B\x16\x1D\xDB\xDB\xAD\x76\xE0\xE0\xDB\x3B\x32\x32\x64\x56\x3A\x3A\x74\x4E\x0A\x0A\x14\x1E\x49\x49\x92\xDB\x06\x06\x0C\x0A\x24\x24\x48\x6C\x5C\x5C\xB8\xE4\xC2\xC2\x9F\x5D\xD3\xD3\xBD\x6E\xAC\xAC\x43\xEF\x62\x62\xC4\xA6\x91\x91\x39\xA8\x95\x95\x31\xA4\xE4\xE4\xD3\x37\x79\x79\xF2\x8B\xE7\xE7\xD5\x32\xC8\xC8\x8B\x43\x37\x37\x6E\x59\x6D\x6D\xDA\xB7\x8D\x8D\x01\x8C\xD5\xD5\xB1\x64\x4E\x4E\x9C\xD2\xA9\xA9\x49\xE0\x6C\x6C\xD8\xB4\x56\x56\xAC\xFA\xF4\xF4\xF3\x07\xEA\xEA\xCF\x25\x65\x65\xCA\xAF\x7A\x7A\xF4\x8E\xAE\xAE\x47\xE9\x08\x08\x10\x18\xBA\xBA\x6F\xD5\x78\x78\xF0\x88\x25\x25\x4A\x6F\x2E\x2E\x5C\x72\x1C\x1C\x38\x24\xA6\xA6\x57\xF1\xB4\xB4\x73\xC7\xC6\xC6\x97\x51\xE8\xE8\xCB\x23\xDD\xDD\xA1\x7C\x74\x74\xE8\x9C\x1F\x1F\x3E\x21\x4B\x4B\x96\xDD\xBD\xBD\x61\xDC\x8B\x8B\x0D\x86\x8A\x8A\x0F\x85\x70\x70\xE0\x90\x3E\x3E\x7C\x42\xB5\xB5\x71\xC4\x66\x66\xCC\xAA\x48\x48\x90\xD8\x03\x03\x06\x05\xF6\xF6\xF7\x01\x0E\x0E\x1C\x12\x61\x61\xC2\xA3\x35\x35\x6A\x5F\x57\x57\xAE\xF9\xB9\xB9\x69\xD0\x86\x86\x17\x91\xC1\xC1\x99\x58\x1D\x1D\x3A\x27\x9E\x9E\x27\xB9\xE1\xE1\xD9\x38\xF8\xF8\xEB\x13\x98\x98\x2B\xB3\x11\x11\x22\x33\x69\x69\xD2\xBB\xD9\xD9\xA9\x70\x8E\x8E\x07\x89\x94\x94\x33\xA7\x9B\x9B\x2D\xB6\x1E\x1E\x3C\x22\x87\x87\x15\x92\xE9\xE9\xC9\x20\xCE\xCE\x87\x49\x55\x55\xAA\xFF\x28\x28\x50\x78\xDF\xDF\xA5\x7A\x8C\x8C\x03\x8F\xA1\xA1\x59\xF8\x89\x89\x09\x80\x0D\x0D\x1A\x17\xBF\xBF\x65\xDA\xE6\xE6\xD7\x31\x42\x42\x84\xC6\x68\x68\xD0\xB8\x41\x41\x82\xC3\x99\x99\x29\xB0\x2D\x2D\x5A\x77\x0F\x0F\x1E\x11\xB0\xB0\x7B\xCB\x54\x54\xA8\xFC\xBB\xBB\x6D\xD6\x16\x16\x2C\x3A";
const uint_32* tab256_2 = (uint_32*)"\x63\xC6\xA5\x63\x7C\xF8\x84\x7C\x77\xEE\x99\x77\x7B\xF6\x8D\x7B\xF2\xFF\x0D\xF2\x6B\xD6\xBD\x6B\x6F\xDE\xB1\x6F\xC5\x91\x54\xC5\x30\x60\x50\x30\x01\x02\x03\x01\x67\xCE\xA9\x67\x2B\x56\x7D\x2B\xFE\xE7\x19\xFE\xD7\xB5\x62\xD7\xAB\x4D\xE6\xAB\x76\xEC\x9A\x76\xCA\x8F\x45\xCA\x82\x1F\x9D\x82\xC9\x89\x40\xC9\x7D\xFA\x87\x7D\xFA\xEF\x15\xFA\x59\xB2\xEB\x59\x47\x8E\xC9\x47\xF0\xFB\x0B\xF0\xAD\x41\xEC\xAD\xD4\xB3\x67\xD4\xA2\x5F\xFD\xA2\xAF\x45\xEA\xAF\x9C\x23\xBF\x9C\xA4\x53\xF7\xA4\x72\xE4\x96\x72\xC0\x9B\x5B\xC0\xB7\x75\xC2\xB7\xFD\xE1\x1C\xFD\x93\x3D\xAE\x93\x26\x4C\x6A\x26\x36\x6C\x5A\x36\x3F\x7E\x41\x3F\xF7\xF5\x02\xF7\xCC\x83\x4F\xCC\x34\x68\x5C\x34\xA5\x51\xF4\xA5\xE5\xD1\x34\xE5\xF1\xF9\x08\xF1\x71\xE2\x93\x71\xD8\xAB\x73\xD8\x31\x62\x53\x31\x15\x2A\x3F\x15\x04\x08\x0C\x04\xC7\x95\x52\xC7\x23\x46\x65\x23\xC3\x9D\x5E\xC3\x18\x30\x28\x18\x96\x37\xA1\x96\x05\x0A\x0F\x05\x9A\x2F\xB5\x9A\x07\x0E\x09\x07\x12\x24\x36\x12\x80\x1B\x9B\x80\xE2\xDF\x3D\xE2\xEB\xCD\x26\xEB\x27\x4E\x69\x27\xB2\x7F\xCD\xB2\x75\xEA\x9F\x75\x09\x12\x1B\x09\x83\x1D\x9E\x83\x2C\x58\x74\x2C\x1A\x34\x2E\x1A\x1B\x36\x2D\x1B\x6E\xDC\xB2\x6E\x5A\xB4\xEE\x5A\xA0\x5B\xFB\xA0\x52\xA4\xF6\x52\x3B\x76\x4D\x3B\xD6\xB7\x61\xD6\xB3\x7D\xCE\xB3\x29\x52\x7B\x29\xE3\xDD\x3E\xE3\x2F\x5E\x71\x2F\x84\x13\x97\x84\x53\xA6\xF5\x53\xD1\xB9\x68\xD1\x00\x00\x00\x00\xED\xC1\x2C\xED\x20\x40\x60\x20\xFC\xE3\x1F\xFC\xB1\x79\xC8\xB1\x5B\xB6\xED\x5B\x6A\xD4\xBE\x6A\xCB\x8D\x46\xCB\xBE\x67\xD9\xBE\x39\x72\x4B\x39\x4A\x94\xDE\x4A\x4C\x98\xD4\x4C\x58\xB0\xE8\x58\xCF\x85\x4A\xCF\xD0\xBB\x6B\xD0\xEF\xC5\x2A\xEF\xAA\x4F\xE5\xAA\xFB\xED\x16\xFB\x43\x86\xC5\x43\x4D\x9A\xD7\x4D\x33\x66\x55\x33\x85\x11\x94\x85\x45\x8A\xCF\x45\xF9\xE9\x10\xF9\x02\x04\x06\x02\x7F\xFE\x81\x7F\x50\xA0\xF0\x50\x3C\x78\x44\x3C\x9F\x25\xBA\x9F\xA8\x4B\xE3\xA8\x51\xA2\xF3\x51\xA3\x5D\xFE\xA3\x40\x80\xC0\x40\x8F\x05\x8A\x8F\x92\x3F\xAD\x92\x9D\x21\xBC\x9D\x38\x70\x48\x38\xF5\xF1\x04\xF5\xBC\x63\xDF\xBC\xB6\x77\xC1\xB6\xDA\xAF\x75\xDA\x21\x42\x63\x21\x10\x20\x30\x10\xFF\xE5\x1A\xFF\xF3\xFD\x0E\xF3\xD2\xBF\x6D\xD2\xCD\x81\x4C\xCD\x0C\x18\x14\x0C\x13\x26\x35\x13\xEC\xC3\x2F\xEC\x5F\xBE\xE1\x5F\x97\x35\xA2\x97\x44\x88\xCC\x44\x17\x2E\x39\x17\xC4\x93\x57\xC4\xA7\x55\xF2\xA7\x7E\xFC\x82\x7E\x3D\x7A\x47\x3D\x64\xC8\xAC\x64\x5D\xBA\xE7\x5D\x19\x32\x2B\x19\x73\xE6\x95\x73\x60\xC0\xA0\x60\x81\x19\x98\x81\x4F\x9E\xD1\x4F\xDC\xA3\x7F\xDC\x22\x44\x66\x22\x2A\x54\x7E\x2A\x90\x3B\xAB\x90\x88\x0B\x83\x88\x46\x8C\xCA\x46\xEE\xC7\x29\xEE\xB8\x6B\xD3\xB8\x14\x28\x3C\x14\xDE\xA7\x79\xDE\x5E\xBC\xE2\x5E\x0B\x16\x1D\x0B\xDB\xAD\x76\xDB\xE0\xDB\x3B\xE0\x32\x64\x56\x32\x3A\x74\x4E\x3A\x0A\x14\x1E\x0A\x49\x92\xDB\x49\x06\x0C\x0A\x06\x24\x48\x6C\x24\x5C\xB8\xE4\x5C\xC2\x9F\x5D\xC2\xD3\xBD\x6E\xD3\xAC\x43\xEF\xAC\x62\xC4\xA6\x62\x91\x39\xA8\x91\x95\x31\xA4\x95\xE4\xD3\x37\xE4\x79\xF2\x8B\x79\xE7\xD5\x32\xE7\xC8\x8B\x43\xC8\x37\x6E\x59\x37\x6D\xDA\xB7\x6D\x8D\x01\x8C\x8D\xD5\xB1\x64\xD5\x4E\x9C\xD2\x4E\xA9\x49\xE0\xA9\x6C\xD8\xB4\x6C\x56\xAC\xFA\x56\xF4\xF3\x07\xF4\xEA\xCF\x25\xEA\x65\xCA\xAF\x65\x7A\xF4\x8E\x7A\xAE\x47\xE9\xAE\x08\x10\x18\x08\xBA\x6F\xD5\xBA\x78\xF0\x88\x78\x25\x4A\x6F\x25\x2E\x5C\x72\x2E\x1C\x38\x24\x1C\xA6\x57\xF1\xA6\xB4\x73\xC7\xB4\xC6\x97\x51\xC6\xE8\xCB\x23\xE8\xDD\xA1\x7C\xDD\x74\xE8\x9C\x74\x1F\x3E\x21\x1F\x4B\x96\xDD\x4B\xBD\x61\xDC\xBD\x8B\x0D\x86\x8B\x8A\x0F\x85\x8A\x70\xE0\x90\x70\x3E\x7C\x42\x3E\xB5\x71\xC4\xB5\x66\xCC\xAA\x66\x48\x90\xD8\x48\x03\x06\x05\x03\xF6\xF7\x01\xF6\x0E\x1C\x12\x0E\x61\xC2\xA3\x61\x35\x6A\x5F\x35\x57\xAE\xF9\x57\xB9\x69\xD0\xB9\x86\x17\x91\x86\xC1\x99\x58\xC1\x1D\x3A\x27\x1D\x9E\x27\xB9\x9E\xE1\xD9\x38\xE1\xF8\xEB\x13\xF8\x98\x2B\xB3\x98\x11\x22\x33\x11\x69\xD2\xBB\x69\xD9\xA9\x70\xD9\x8E\x07\x89\x8E\x94\x33\xA7\x94\x9B\x2D\xB6\x9B\x1E\x3C\x22\x1E\x87\x15\x92\x87\xE9\xC9\x20\xE9\xCE\x87\x49\xCE\x55\xAA\xFF\x55\x28\x50\x78\x28\xDF\xA5\x7A\xDF\x8C\x03\x8F\x8C\xA1\x59\xF8\xA1\x89\x09\x80\x89\x0D\x1A\x17\x0D\xBF\x65\xDA\xBF\xE6\xD7\x31\xE6\x42\x84\xC6\x42\x68\xD0\xB8\x68\x41\x82\xC3\x41\x99\x29\xB0\x99\x2D\x5A\x77\x2D\x0F\x1E\x11\x0F\xB0\x7B\xCB\xB0\x54\xA8\xFC\x54\xBB\x6D\xD6\xBB\x16\x2C\x3A\x16";
const uint_32* tab256_3 = (uint_32*)"\xC6\xA5\x63\x63\xF8\x84\x7C\x7C\xEE\x99\x77\x77\xF6\x8D\x7B\x7B\xFF\x0D\xF2\xF2\xD6\xBD\x6B\x6B\xDE\xB1\x6F\x6F\x91\x54\xC5\xC5\x60\x50\x30\x30\x02\x03\x01\x01\xCE\xA9\x67\x67\x56\x7D\x2B\x2B\xE7\x19\xFE\xFE\xB5\x62\xD7\xD7\x4D\xE6\xAB\xAB\xEC\x9A\x76\x76\x8F\x45\xCA\xCA\x1F\x9D\x82\x82\x89\x40\xC9\xC9\xFA\x87\x7D\x7D\xEF\x15\xFA\xFA\xB2\xEB\x59\x59\x8E\xC9\x47\x47\xFB\x0B\xF0\xF0\x41\xEC\xAD\xAD\xB3\x67\xD4\xD4\x5F\xFD\xA2\xA2\x45\xEA\xAF\xAF\x23\xBF\x9C\x9C\x53\xF7\xA4\xA4\xE4\x96\x72\x72\x9B\x5B\xC0\xC0\x75\xC2\xB7\xB7\xE1\x1C\xFD\xFD\x3D\xAE\x93\x93\x4C\x6A\x26\x26\x6C\x5A\x36\x36\x7E\x41\x3F\x3F\xF5\x02\xF7\xF7\x83\x4F\xCC\xCC\x68\x5C\x34\x34\x51\xF4\xA5\xA5\xD1\x34\xE5\xE5\xF9\x08\xF1\xF1\xE2\x93\x71\x71\xAB\x73\xD8\xD8\x62\x53\x31\x31\x2A\x3F\x15\x15\x08\x0C\x04\x04\x95\x52\xC7\xC7\x46\x65\x23\x23\x9D\x5E\xC3\xC3\x30\x28\x18\x18\x37\xA1\x96\x96\x0A\x0F\x05\x05\x2F\xB5\x9A\x9A\x0E\x09\x07\x07\x24\x36\x12\x12\x1B\x9B\x80\x80\xDF\x3D\xE2\xE2\xCD\x26\xEB\xEB\x4E\x69\x27\x27\x7F\xCD\xB2\xB2\xEA\x9F\x75\x75\x12\x1B\x09\x09\x1D\x9E\x83\x83\x58\x74\x2C\x2C\x34\x2E\x1A\x1A\x36\x2D\x1B\x1B\xDC\xB2\x6E\x6E\xB4\xEE\x5A\x5A\x5B\xFB\xA0\xA0\xA4\xF6\x52\x52\x76\x4D\x3B\x3B\xB7\x61\xD6\xD6\x7D\xCE\xB3\xB3\x52\x7B\x29\x29\xDD\x3E\xE3\xE3\x5E\x71\x2F\x2F\x13\x97\x84\x84\xA6\xF5\x53\x53\xB9\x68\xD1\xD1\x00\x00\x00\x00\xC1\x2C\xED\xED\x40\x60\x20\x20\xE3\x1F\xFC\xFC\x79\xC8\xB1\xB1\xB6\xED\x5B\x5B\xD4\xBE\x6A\x6A\x8D\x46\xCB\xCB\x67\xD9\xBE\xBE\x72\x4B\x39\x39\x94\xDE\x4A\x4A\x98\xD4\x4C\x4C\xB0\xE8\x58\x58\x85\x4A\xCF\xCF\xBB\x6B\xD0\xD0\xC5\x2A\xEF\xEF\x4F\xE5\xAA\xAA\xED\x16\xFB\xFB\x86\xC5\x43\x43\x9A\xD7\x4D\x4D\x66\x55\x33\x33\x11\x94\x85\x85\x8A\xCF\x45\x45\xE9\x10\xF9\xF9\x04\x06\x02\x02\xFE\x81\x7F\x7F\xA0\xF0\x50\x50\x78\x44\x3C\x3C\x25\xBA\x9F\x9F\x4B\xE3\xA8\xA8\xA2\xF3\x51\x51\x5D\xFE\xA3\xA3\x80\xC0\x40\x40\x05\x8A\x8F\x8F\x3F\xAD\x92\x92\x21\xBC\x9D\x9D\x70\x48\x38\x38\xF1\x04\xF5\xF5\x63\xDF\xBC\xBC\x77\xC1\xB6\xB6\xAF\x75\xDA\xDA\x42\x63\x21\x21\x20\x30\x10\x10\xE5\x1A\xFF\xFF\xFD\x0E\xF3\xF3\xBF\x6D\xD2\xD2\x81\x4C\xCD\xCD\x18\x14\x0C\x0C\x26\x35\x13\x13\xC3\x2F\xEC\xEC\xBE\xE1\x5F\x5F\x35\xA2\x97\x97\x88\xCC\x44\x44\x2E\x39\x17\x17\x93\x57\xC4\xC4\x55\xF2\xA7\xA7\xFC\x82\x7E\x7E\x7A\x47\x3D\x3D\xC8\xAC\x64\x64\xBA\xE7\x5D\x5D\x32\x2B\x19\x19\xE6\x95\x73\x73\xC0\xA0\x60\x60\x19\x98\x81\x81\x9E\xD1\x4F\x4F\xA3\x7F\xDC\xDC\x44\x66\x22\x22\x54\x7E\x2A\x2A\x3B\xAB\x90\x90\x0B\x83\x88\x88\x8C\xCA\x46\x46\xC7\x29\xEE\xEE\x6B\xD3\xB8\xB8\x28\x3C\x14\x14\xA7\x79\xDE\xDE\xBC\xE2\x5E\x5E\x16\x1D\x0B\x0B\xAD\x76\xDB\xDB\xDB\x3B\xE0\xE0\x64\x56\x32\x32\x74\x4E\x3A\x3A\x14\x1E\x0A\x0A\x92\xDB\x49\x49\x0C\x0A\x06\x06\x48\x6C\x24\x24\xB8\xE4\x5C\x5C\x9F\x5D\xC2\xC2\xBD\x6E\xD3\xD3\x43\xEF\xAC\xAC\xC4\xA6\x62\x62\x39\xA8\x91\x91\x31\xA4\x95\x95\xD3\x37\xE4\xE4\xF2\x8B\x79\x79\xD5\x32\xE7\xE7\x8B\x43\xC8\xC8\x6E\x59\x37\x37\xDA\xB7\x6D\x6D\x01\x8C\x8D\x8D\xB1\x64\xD5\xD5\x9C\xD2\x4E\x4E\x49\xE0\xA9\xA9\xD8\xB4\x6C\x6C\xAC\xFA\x56\x56\xF3\x07\xF4\xF4\xCF\x25\xEA\xEA\xCA\xAF\x65\x65\xF4\x8E\x7A\x7A\x47\xE9\xAE\xAE\x10\x18\x08\x08\x6F\xD5\xBA\xBA\xF0\x88\x78\x78\x4A\x6F\x25\x25\x5C\x72\x2E\x2E\x38\x24\x1C\x1C\x57\xF1\xA6\xA6\x73\xC7\xB4\xB4\x97\x51\xC6\xC6\xCB\x23\xE8\xE8\xA1\x7C\xDD\xDD\xE8\x9C\x74\x74\x3E\x21\x1F\x1F\x96\xDD\x4B\x4B\x61\xDC\xBD\xBD\x0D\x86\x8B\x8B\x0F\x85\x8A\x8A\xE0\x90\x70\x70\x7C\x42\x3E\x3E\x71\xC4\xB5\xB5\xCC\xAA\x66\x66\x90\xD8\x48\x48\x06\x05\x03\x03\xF7\x01\xF6\xF6\x1C\x12\x0E\x0E\xC2\xA3\x61\x61\x6A\x5F\x35\x35\xAE\xF9\x57\x57\x69\xD0\xB9\xB9\x17\x91\x86\x86\x99\x58\xC1\xC1\x3A\x27\x1D\x1D\x27\xB9\x9E\x9E\xD9\x38\xE1\xE1\xEB\x13\xF8\xF8\x2B\xB3\x98\x98\x22\x33\x11\x11\xD2\xBB\x69\x69\xA9\x70\xD9\xD9\x07\x89\x8E\x8E\x33\xA7\x94\x94\x2D\xB6\x9B\x9B\x3C\x22\x1E\x1E\x15\x92\x87\x87\xC9\x20\xE9\xE9\x87\x49\xCE\xCE\xAA\xFF\x55\x55\x50\x78\x28\x28\xA5\x7A\xDF\xDF\x03\x8F\x8C\x8C\x59\xF8\xA1\xA1\x09\x80\x89\x89\x1A\x17\x0D\x0D\x65\xDA\xBF\xBF\xD7\x31\xE6\xE6\x84\xC6\x42\x42\xD0\xB8\x68\x68\x82\xC3\x41\x41\x29\xB0\x99\x99\x5A\x77\x2D\x2D\x1E\x11\x0F\x0F\x7B\xCB\xB0\xB0\xA8\xFC\x54\x54\x6D\xD6\xBB\xBB\x2C\x3A\x16\x16";

const uint_32* tab256_x = (uint_32*)"\x63\x63\x63\x63\x7C\x7C\x7C\x7C\x77\x77\x77\x77\x7B\x7B\x7B\x7B\xF2\xF2\xF2\xF2\x6B\x6B\x6B\x6B\x6F\x6F\x6F\x6F\xC5\xC5\xC5\xC5\x30\x30\x30\x30\x01\x01\x01\x01\x67\x67\x67\x67\x2B\x2B\x2B\x2B\xFE\xFE\xFE\xFE\xD7\xD7\xD7\xD7\xAB\xAB\xAB\xAB\x76\x76\x76\x76\xCA\xCA\xCA\xCA\x82\x82\x82\x82\xC9\xC9\xC9\xC9\x7D\x7D\x7D\x7D\xFA\xFA\xFA\xFA\x59\x59\x59\x59\x47\x47\x47\x47\xF0\xF0\xF0\xF0\xAD\xAD\xAD\xAD\xD4\xD4\xD4\xD4\xA2\xA2\xA2\xA2\xAF\xAF\xAF\xAF\x9C\x9C\x9C\x9C\xA4\xA4\xA4\xA4\x72\x72\x72\x72\xC0\xC0\xC0\xC0\xB7\xB7\xB7\xB7\xFD\xFD\xFD\xFD\x93\x93\x93\x93\x26\x26\x26\x26\x36\x36\x36\x36\x3F\x3F\x3F\x3F\xF7\xF7\xF7\xF7\xCC\xCC\xCC\xCC\x34\x34\x34\x34\xA5\xA5\xA5\xA5\xE5\xE5\xE5\xE5\xF1\xF1\xF1\xF1\x71\x71\x71\x71\xD8\xD8\xD8\xD8\x31\x31\x31\x31\x15\x15\x15\x15\x04\x04\x04\x04\xC7\xC7\xC7\xC7\x23\x23\x23\x23\xC3\xC3\xC3\xC3\x18\x18\x18\x18\x96\x96\x96\x96\x05\x05\x05\x05\x9A\x9A\x9A\x9A\x07\x07\x07\x07\x12\x12\x12\x12\x80\x80\x80\x80\xE2\xE2\xE2\xE2\xEB\xEB\xEB\xEB\x27\x27\x27\x27\xB2\xB2\xB2\xB2\x75\x75\x75\x75\x09\x09\x09\x09\x83\x83\x83\x83\x2C\x2C\x2C\x2C\x1A\x1A\x1A\x1A\x1B\x1B\x1B\x1B\x6E\x6E\x6E\x6E\x5A\x5A\x5A\x5A\xA0\xA0\xA0\xA0\x52\x52\x52\x52\x3B\x3B\x3B\x3B\xD6\xD6\xD6\xD6\xB3\xB3\xB3\xB3\x29\x29\x29\x29\xE3\xE3\xE3\xE3\x2F\x2F\x2F\x2F\x84\x84\x84\x84\x53\x53\x53\x53\xD1\xD1\xD1\xD1\x00\x00\x00\x00\xED\xED\xED\xED\x20\x20\x20\x20\xFC\xFC\xFC\xFC\xB1\xB1\xB1\xB1\x5B\x5B\x5B\x5B\x6A\x6A\x6A\x6A\xCB\xCB\xCB\xCB\xBE\xBE\xBE\xBE\x39\x39\x39\x39\x4A\x4A\x4A\x4A\x4C\x4C\x4C\x4C\x58\x58\x58\x58\xCF\xCF\xCF\xCF\xD0\xD0\xD0\xD0\xEF\xEF\xEF\xEF\xAA\xAA\xAA\xAA\xFB\xFB\xFB\xFB\x43\x43\x43\x43\x4D\x4D\x4D\x4D\x33\x33\x33\x33\x85\x85\x85\x85\x45\x45\x45\x45\xF9\xF9\xF9\xF9\x02\x02\x02\x02\x7F\x7F\x7F\x7F\x50\x50\x50\x50\x3C\x3C\x3C\x3C\x9F\x9F\x9F\x9F\xA8\xA8\xA8\xA8\x51\x51\x51\x51\xA3\xA3\xA3\xA3\x40\x40\x40\x40\x8F\x8F\x8F\x8F\x92\x92\x92\x92\x9D\x9D\x9D\x9D\x38\x38\x38\x38\xF5\xF5\xF5\xF5\xBC\xBC\xBC\xBC\xB6\xB6\xB6\xB6\xDA\xDA\xDA\xDA\x21\x21\x21\x21\x10\x10\x10\x10\xFF\xFF\xFF\xFF\xF3\xF3\xF3\xF3\xD2\xD2\xD2\xD2\xCD\xCD\xCD\xCD\x0C\x0C\x0C\x0C\x13\x13\x13\x13\xEC\xEC\xEC\xEC\x5F\x5F\x5F\x5F\x97\x97\x97\x97\x44\x44\x44\x44\x17\x17\x17\x17\xC4\xC4\xC4\xC4\xA7\xA7\xA7\xA7\x7E\x7E\x7E\x7E\x3D\x3D\x3D\x3D\x64\x64\x64\x64\x5D\x5D\x5D\x5D\x19\x19\x19\x19\x73\x73\x73\x73\x60\x60\x60\x60\x81\x81\x81\x81\x4F\x4F\x4F\x4F\xDC\xDC\xDC\xDC\x22\x22\x22\x22\x2A\x2A\x2A\x2A\x90\x90\x90\x90\x88\x88\x88\x88\x46\x46\x46\x46\xEE\xEE\xEE\xEE\xB8\xB8\xB8\xB8\x14\x14\x14\x14\xDE\xDE\xDE\xDE\x5E\x5E\x5E\x5E\x0B\x0B\x0B\x0B\xDB\xDB\xDB\xDB\xE0\xE0\xE0\xE0\x32\x32\x32\x32\x3A\x3A\x3A\x3A\x0A\x0A\x0A\x0A\x49\x49\x49\x49\x06\x06\x06\x06\x24\x24\x24\x24\x5C\x5C\x5C\x5C\xC2\xC2\xC2\xC2\xD3\xD3\xD3\xD3\xAC\xAC\xAC\xAC\x62\x62\x62\x62\x91\x91\x91\x91\x95\x95\x95\x95\xE4\xE4\xE4\xE4\x79\x79\x79\x79\xE7\xE7\xE7\xE7\xC8\xC8\xC8\xC8\x37\x37\x37\x37\x6D\x6D\x6D\x6D\x8D\x8D\x8D\x8D\xD5\xD5\xD5\xD5\x4E\x4E\x4E\x4E\xA9\xA9\xA9\xA9\x6C\x6C\x6C\x6C\x56\x56\x56\x56\xF4\xF4\xF4\xF4\xEA\xEA\xEA\xEA\x65\x65\x65\x65\x7A\x7A\x7A\x7A\xAE\xAE\xAE\xAE\x08\x08\x08\x08\xBA\xBA\xBA\xBA\x78\x78\x78\x78\x25\x25\x25\x25\x2E\x2E\x2E\x2E\x1C\x1C\x1C\x1C\xA6\xA6\xA6\xA6\xB4\xB4\xB4\xB4\xC6\xC6\xC6\xC6\xE8\xE8\xE8\xE8\xDD\xDD\xDD\xDD\x74\x74\x74\x74\x1F\x1F\x1F\x1F\x4B\x4B\x4B\x4B\xBD\xBD\xBD\xBD\x8B\x8B\x8B\x8B\x8A\x8A\x8A\x8A\x70\x70\x70\x70\x3E\x3E\x3E\x3E\xB5\xB5\xB5\xB5\x66\x66\x66\x66\x48\x48\x48\x48\x03\x03\x03\x03\xF6\xF6\xF6\xF6\x0E\x0E\x0E\x0E\x61\x61\x61\x61\x35\x35\x35\x35\x57\x57\x57\x57\xB9\xB9\xB9\xB9\x86\x86\x86\x86\xC1\xC1\xC1\xC1\x1D\x1D\x1D\x1D\x9E\x9E\x9E\x9E\xE1\xE1\xE1\xE1\xF8\xF8\xF8\xF8\x98\x98\x98\x98\x11\x11\x11\x11\x69\x69\x69\x69\xD9\xD9\xD9\xD9\x8E\x8E\x8E\x8E\x94\x94\x94\x94\x9B\x9B\x9B\x9B\x1E\x1E\x1E\x1E\x87\x87\x87\x87\xE9\xE9\xE9\xE9\xCE\xCE\xCE\xCE\x55\x55\x55\x55\x28\x28\x28\x28\xDF\xDF\xDF\xDF\x8C\x8C\x8C\x8C\xA1\xA1\xA1\xA1\x89\x89\x89\x89\x0D\x0D\x0D\x0D\xBF\xBF\xBF\xBF\xE6\xE6\xE6\xE6\x42\x42\x42\x42\x68\x68\x68\x68\x41\x41\x41\x41\x99\x99\x99\x99\x2D\x2D\x2D\x2D\x0F\x0F\x0F\x0F\xB0\xB0\xB0\xB0\x54\x54\x54\x54\xBB\xBB\xBB\xBB\x16\x16\x16\x16";


DWORD* gds_key= (DWORD*)"\x21\x16\x2C\x43\xCB\x96\x66\xD9\xAF\x7E\x47\xBD\x36\x95\xDB\xB3\xB9\x76\xCF\x9C\x8C\xC4\xDC\x6D\x52\x4F\xB6\x5C\x10\x99\xB2\x98\x67\xDC\xC2\x75\xAC\x4A\xA4\xAC\x03\x34\xE3\x11\x35\xA1\x38\xA2\x2F\x44\xC8\xA6\xA3\x80\x14\xCB\xF1\xCF\xA2\x97\xE1\x56\x10\x0F\x11\x24\x73\xBD\xBD\x6E\xD7\x11\xBE\x5A\x34\x00\x8B\xFB\x0C\xA2\x12\x4B\x36\x9C\xB1\xCB\x22\x57\x40\x04\x80\xC0\xA1\x52\x90\xCF\x9B\x16\x73\xD9\x26\x78\xA4\xC8\x98\x22\x90\xC8\x13\xD9\x9C\x6A\x6F\x7E\xE8\x9E\xDE\xB5\xCA\xC9\x9E\xB1\x4A\x09\x3F\xE3\xDA\xC6\x2F\x63\x62\x86\x09\x1B\xC6\x4E\x91\x39\x56\x86\x82\xE0\xCA\xEC\x7C\x9F\x9C\x50\xA2\x2A\x56\x99\x3C\x9B\x1C\x90\x03\x78\xC6\x56\x9E\x18\xDE\x22\x97\x03\x18\x6C\x06\x3A\x4E\xEA\x84\xDA\x84\x06\x23\xC8\xC3\x3F\x81\xE2\x95\xA6\xBD\x79\x89\x36\xBE\x01\x4F\x60\x4E\xB6\xA2\x86\xD9\xB5\xBA\xEA\xDF\x8F\xF4\x00\x5B\x55\x70\x06\x1A\x34\x92\x50\x9B\xD6\x07\xF6\x26\xAF\x8E\xC0\x98\xAE\xC1\xA0\xAE\xF0\x46\xBE\x77\x45\xFC\x54\xA8\xCA\x08\x54\xF3\x9F\x78\x52";
DWORD* flavor_key = (DWORD*)"\xA7\x0C\xF6\xB9\xA6\xB4\x00\x4F\xD9\xC0\xE3\x4F\xC5\x8D\xFC\x9D\x84\xE1\x1A\x72\xF9\xA2\x4F\x52\x50\xC7\x1C\x5D\x7B\xA0\xF5\x95\x8D\x2D\x16\x5E\x2B\x99\x16\x11\xF2\x59\xF5\x5E\x37\xD4\x09\xC3\x1E\xA9\x1B\x5C\xE7\x0B\x54\x0E\xB7\xCC\x48\x53\xCC\x6C\xBD\xC6\x39\x66\x46\x26\x12\xFF\x50\x37\xE0\xA6\xA5\x69\xD7\x72\xAC\xAA\x10\xE9\x8A\xF0\xF7\xE2\xDE\xFE\x40\x2E\x96\xAD\x8C\x42\x2B\x6B\x46\x02\x6A\xD3\x54\xFD\x3A\xE4\xB4\x5B\x9F\x8D\x63\x29\x33\x27\xEB\x4C\x49\x3C\x1C\xAE\x97\xC2\x5C\x80\x01\x6F\xD0\xC2\x2A\x04\xB4\x72\x4F\x3E\xE0\x8F\x75\xDA\x54\xD4\xEA\x57\x37\xFD\xD9\x70\x71\x18\x7C\x6D\x6D\xB6\xEB\xAF\x31\x36\xEA\xC0\xE1\xF4\xC0\xC4\xA8\x8A\xF0\x94\x48\x05\x85\x4E\x1C\xD1\x6F\x19\x2B\x2C\xB6\x69\x80\x69\x32\x94\xED\xDF\xD9\x3B\xDC\xE9\x33\xFB\x3D\x1D\xF3\x3F\xDD\xAD\x54\xB9\x95\xA8\xD1\xF7\x89\x79\xBE\xEE\xA2\x55\x08\x87\xBA\x95\x02\x83\x57\x4A\xDB\xB8\x8B\xA3\xE8\x43\xB6\xBE\x1B\x7C\xCD\xE3\xFA\x56\x58\x4B\x2B\xA1\xD1\x32\x95\x4F\x73\x67\x9D\xC8";
DWORD* user_key = (DWORD*)"\x61\x6E\x61\x6D\x65\x6D\x65\x67\x73\x69\x74\x6E\x62\x6D\x75\x64\x61\x6E\x61\x6D\x65\x6D\x65\x67\x73\x69\x74\x6E\x62\x6D\x75\x64\x22\xC4\x5D\xF1\x47\xA9\x38\x96\x34\xC0\x4C\xF8\x56\xAD\x39\x9C\xD0\xFB\x73\xB3\xB5\x96\x16\xD4\xC6\xFF\x62\xBA\xA4\x92\x17\xDE\x3F\x8D\x12\x03\x78\x24\x2A\x95\x4C\xE4\x66\x6D\x1A\x49\x5F\xF1\x72\xC0\xBC\x12\xC7\x56\xAA\xC6\x01\xA9\xC8\x7C\xA5\x3B\xDF\xA2\x05\x8B\xF0\x99\x7D\xAF\xDA\x0C\x31\x4B\xBC\x61\x2B\x02\xE3\x90\x83\xB7\xAD\x72\x44\xE1\x07\xB4\x45\x48\xCF\xC8\xE0\x73\x10\x6A\x07\x6A\x7F\x5B\x7A\xC5\xA5\x57\x4B\x8E\x19\x36\x60\x8C\xFA\xA6\x53\xD3\x80\x56\x17\x32\x87\xE2\x52\x7A\x48\x2A\xB2\x09\x58\x40\x0E\x5D\x7E\x21\x74\x98\xDB\x76\x3F\x16\xC2\x40\x5F\x9A\x38\xE6\x9C\x6B\x87\xD8\x8B\x59\x00\x3A\xD9\x23\x48\x10\x6B\x2A\x10\x50\x5D\x22\x9B\xCB\x29\xBA\x40\xBD\x16\xAC\x82\xFD\x49\x36\xBA\x1B\xA7\x6E\x73\x77\x2C\x37\x73\x4D\xF5\x14\x3B\x5D\x9E\x3E\x2B\x0D\x8A\x29\x29\x7A\xA3\x93\x69\xC7\xB5\x3F\xEB\x3A\xFC\x09\x51\x21";

DWORD __ROL4__(DWORD a)
{

    _asm {
        push eax
        mov eax, a
        rol eax,8
        mov a, eax
        pop eax
    }
    return a;
}

DWORD __ROR4__(DWORD a)
{

    _asm {
        push eax
        mov eax, a
        ror eax,8
        mov a, eax
        pop eax
    }
    return a;
}


unsigned int  handle_16bytes(DWORD* key_32, DWORD* a2, uint_32* a3)
{
    DWORD* v3; // ebx
    uint_32 v4; // esi
    uint_32 v5; // edx
    uint_32 v6; // edi
    uint_32 v7; // ST18_4
    uint_32 v8; // ecx
    uint_32 v9; // edx
    uint_32 v10; // edi
    int v11; // ebx
    DWORD* v12; // eax
    uint_32 v13; // ST18_4
    uint_32 v14; // esi
    uint_32 v15; // ebx
    uint_32 v16; // edi
    uint_32 v17; // ST1C_4
    bool v18; // zf
    uint_32 v19; // ecx
    int v20; // edx
    uint_32 result; // eax
    signed int v22; // [esp+8h] [ebp-14h]
    uint_32 v23; // [esp+Ch] [ebp-10h]
    uint_32 v24; // [esp+18h] [ebp-4h]

    v3 = a2;
    v4 = *key_32 ^ (0xFF00FF & __ROL4__(*a2) | __ROR4__(*a2) & 0xFF00FF00);
    v5 = key_32[2] ^ (0xFF00FF & __ROL4__(v3[2]) | __ROR4__(v3[2]) & 0xFF00FF00);
    v6 = key_32[3] ^ (0xFF00FF & __ROL4__(v3[3]) | __ROR4__(v3[3]) & 0xFF00FF00);
    v7 = key_32[1] ^ (0xFF00FF & __ROL4__(a2[1]) | __ROR4__(a2[1]) & 0xFF00FF00);
    v8 = key_32[4] ^ tab256_3[(uint_8)(*((BYTE*)key_32 + 12) ^ 0xFF00FF & __ROL4__(a2[3]))] ^ tab256_0[v4 >> 24] ^ tab256_1[(v7 >> 16) & 0xFF] ^ tab256_2[(uint_16)v5 >> 8];
    v9 = key_32[5] ^ tab256_3[(uint_8)v4] ^ tab256_0[v7 >> 24] ^ tab256_1[(v5 >> 16) & 0xFF] ^ tab256_2[(uint_16)v6 >> 8];
    v10 = key_32[6] ^ tab256_3[(uint_8)v7] ^ tab256_0[(key_32[2] ^ (0xFF00FF & __ROL4__(v3[2]) | __ROR4__(v3[2]) & 0xFF00FF00)) >> 24] ^ tab256_2[(uint_16)v4 >> 8] ^ tab256_1[(v6 >> 16) & 0xFF];
    v23 = v10;
    v11 = key_32[7] ^ tab256_3[(uint_8)(*((BYTE*)key_32 + 8) ^ 0xFF00FF & __ROL4__(v3[2]))] ^ tab256_0[(key_32[3] ^ (0xFF00FF & __ROL4__(v3[3]) | __ROR4__(v3[3]) & 0xFF00FF00)) >> 24] ^ tab256_1[(v4 >> 16) & 0xFF] ^ tab256_2[(uint_16)v7 >> 8];
    v12 = key_32 + 8;
    v24 = v11;
    v22 = 6;
    do
    {
        v13 = v12[1] ^ tab256_3[(uint_8)v8] ^ tab256_0[v9 >> 24] ^ tab256_1[(v10 >> 16) & 0xFF] ^ tab256_2[(uint_16)v24 >> 8];
        v14 = *v12 ^ tab256_3[(uint_8)v24] ^ tab256_0[v8 >> 24] ^ tab256_1[(v9 >> 16) & 0xFF] ^ tab256_2[(uint_16)v10 >> 8];
        v15 = v12[2] ^ tab256_3[(uint_8)v9] ^ tab256_0[v23 >> 24] ^ tab256_2[(uint_16)v8 >> 8] ^ tab256_1[(v24 >> 16) & 0xFF];
        v16 = v12[3] ^ tab256_3[(uint_8)v23] ^ tab256_0[v24 >> 24] ^ tab256_1[(v8 >> 16) & 0xFF] ^ tab256_2[(uint_16)v9 >> 8];
        v8 = v12[4] ^ tab256_3[(uint_8)v16] ^ tab256_0[v14 >> 24] ^ tab256_1[(v13 >> 16) & 0xFF] ^ tab256_2[(uint_16)v15 >> 8];
        v17 = v16;
        v9 = v12[5] ^ tab256_3[(uint_8)v14] ^ tab256_0[v13 >> 24] ^ tab256_1[(v15 >> 16) & 0xFF] ^ tab256_2[(uint_16)v16 >> 8];
        v10 = v12[6] ^ tab256_3[(uint_8)v13] ^ tab256_0[v15 >> 24] ^ tab256_2[(uint_16)v14 >> 8] ^ tab256_1[(v16 >> 16) & 0xFF];
        v12 += 8;
        v18 = v22-- == 1;
        v23 = v10;
        v24 = *(v12 - 1) ^ tab256_3[(uint_8)v15] ^ tab256_0[v17 >> 24] ^ tab256_1[(v14 >> 16) & 0xFF] ^ tab256_2[(uint_16)v13 >> 8];
    } while (!v18);
    *a3 = 0xFF00FF & __ROL4__(*v12 ^ LOBYTE(tab256_x[(uint_8)v24]) ^ tab256_x[v8 >> 24] & 0xFF000000 ^ tab256_x[(uint_16)v10 >> 8] & 0xFF00 ^ 0xFF0000 & tab256_x[(v9 >> 16) & 0xFF]) 
        | __ROR4__(*v12 ^ LOBYTE(tab256_x[(uint_8)v24]) ^ tab256_x[v8 >> 24] & 0xFF000000 ^ tab256_x[(uint_16)v10 >> 8] & 0xFF00 ^ 0xFF0000 & tab256_x[(v9 >> 16) & 0xFF]) & 0xFF00FF00;
    a3[1] = 0xFF00FF & __ROL4__(
        v12[1] ^ LOBYTE(tab256_x[(uint_8)v8]) ^ tab256_x[v9 >> 24] & 0xFF000000 ^ tab256_x[(uint_16)v24 >> 8] & 0xFF00 ^ 0xFF0000 & tab256_x[(v10 >> 16) & 0xFF]) | __ROR4__
        (v12[1] ^ LOBYTE(tab256_x[(uint_8)v8]) ^ tab256_x[v9 >> 24] & 0xFF000000 ^ tab256_x[(uint_16)v24 >> 8] & 0xFF00 ^ 0xFF0000 & tab256_x[(v10 >> 16) & 0xFF]) & 0xFF00FF00;
    a3[2] = 0xFF00FF & __ROL4__(
        v12[2] ^ LOBYTE(tab256_x[(uint_8)v9]) ^ tab256_x[v10 >> 24] & 0xFF000000 ^ tab256_x[(uint_16)v8 >> 8] & 0xFF00 ^ 0xFF0000 & tab256_x[(v24 >> 16) & 0xFF]) | __ROR4__(
            v12[2] ^ LOBYTE(tab256_x[(uint_8)v9]) ^ tab256_x[v10 >> 24] & 0xFF000000 ^ tab256_x[(uint_16)v8 >> 8] & 0xFF00 ^ 0xFF0000 & tab256_x[(v24 >> 16) & 0xFF]) & 0xFF00FF00;
    v19 = tab256_x[v24 >> 24] & 0xFF000000 ^ tab256_x[(uint_16)v9 >> 8] & 0xFF00 ^ 0xFF0000 & tab256_x[(v8 >> 16) & 0xFF];
    v20 = LOBYTE(tab256_x[(uint_8)v10]);
    result = 0xFF00FF & __ROL4__(v12[3] ^ v20 ^ v19) | __ROR4__(v12[3] ^ v20 ^ v19) & 0xFF00FF00;
    a3[3] = result;
    return result;
}


//BYTE *__cdecl read_and_decode1000bytes(int key, BYTE *buffer, int a3, int a4)
//{
//  BYTE *v4; // ebx
//  DWORD *v5; // esi
//  int v6; // edi
//  int v7; // eax
//  int v9; // edi
//  char v10; // al
//  unsigned __int8 v11; // al
//  unsigned __int8 v12; // al
//  unsigned int *v13; // ebx
//  DWORD *v14; // edi
//  unsigned int *v15; // ecx
//  int v16; // ebx
//  int v17; // edi
//  unsigned __int8 v18; // al
//  unsigned int *v19; // ebx
//  DWORD *v20; // edi
//  unsigned int *v21; // ecx
//  int v22; // ebx
//  int v23; // edi
//  int v24; // edi
//  unsigned __int8 v25; // al
//  unsigned __int8 v26; // cl
//  int v27; // edx
//  int v28; // esi
//  char v29; // bl
//  unsigned __int8 v30; // al
//  unsigned __int8 v31; // cl
//  int v32; // esi
//  char v33; // bl
//  unsigned __int8 v34; // al
//  unsigned __int8 v35; // cl
//  int v36; // esi
//  char v37; // bl
//  unsigned __int8 v38; // al
//  unsigned __int8 v39; // cl
//  int v40; // esi
//  char v41; // bl
//  unsigned __int8 v42; // cl
//  unsigned __int8 v43; // al
//  char v44; // dl
//  unsigned __int8 v45; // cl
//  char v46; // bl
//  unsigned __int8 v47; // al
//  char v48; // dl
//  unsigned __int8 v49; // cl
//  char v50; // bl
//  char v51; // dl
//  char *v52; // edi
//  unsigned __int8 v53; // cl
//  char v54; // bl
//  char v55; // dl
//  char *v56; // edi
//  char v57; // bl
//  bool v58; // zf
//  int v59; // edx
//  unsigned int v60; // edi
//  char v61; // dl
//  char *v62; // esi
//  char *v63; // ST30_4
//  BYTE *v64; // eax
//  BYTE *v65; // edi
//  unsigned int v66; // edx
//  BYTE *v67; // ecx
//  BYTE *v68; // eax
//  int v69; // [esp+Ch] [ebp-324h]
//  DWORD *v70; // [esp+18h] [ebp-318h]
//  DWORD *v71; // [esp+18h] [ebp-318h]
//  int v72; // [esp+1Ch] [ebp-314h]
//  signed int v73; // [esp+1Ch] [ebp-314h]
//  signed int v74; // [esp+1Ch] [ebp-314h]
//  BYTE *v75; // [esp+1Ch] [ebp-314h]
//  char v76[256]; // [esp+20h] [ebp-310h]
//  char v77[256]; // [esp+120h] [ebp-210h]
//  int v78; // [esp+220h] [ebp-110h]
//  char v79[264]; // [esp+224h] [ebp-10Ch]
//
//  v4 = buffer;
//  v5 = (DWORD *)key;
//  if ( !*(DWORD *)(key + 1092) )
//  {
//    if ( *(BYTE *)(key + 1083) )
//      return 0;
//    v6 = 2 * *(DWORD *)(key + 1084) + 8;
//    //if ( sub_71E9E0() )
//    //  v7 = 0;
//    //else
//    //  v7 = sub_6C1700(v6);
//    *(DWORD *)(key + 1092) = v7;
//    if ( !v7 )
//    {
//      *(BYTE *)(key + 1083) = 1;
//      return 0;
//    }
//    *(DWORD *)(key + 1096) = *(DWORD *)(key + 1084) + v7 + 4;
//  }
//  if ( a4 )
//  {
//    if ( *(BYTE *)(540 * (a4 & 1) + key + 1) )
//    {
//      *(BYTE *)(key + 1080) = 1;
//      return buffer;
//    }
//    *(BYTE *)(key + 1080) = 0;
//  }
//  else if ( *(BYTE *)(key + 1080) )
//  {
//    return buffer;
//  }
//  v9 = 540 * (a4 & 1);
//  v72 = *(unsigned __int8 *)(v9 + key + 2);
//  v78 = a3;
//  //if ( !byte_13FC6B4 )
//  //{
//  //  LOBYTE(v78) = HIBYTE(a3);
//  //  HIBYTE(v78) = a3;
//  //  v10 = BYTE1(v78);
//  //  BYTE1(v78) = BYTE2(v78);
//  //  BYTE2(v78) = v10;
//  //}
//  v11 = *(BYTE *)(key + 1081);
//  if ( v11 )
//  {
//    if ( a4 & 4 )
//    {
//     // sub_6C3410(v11, v79);
//      //memcpy_0(&buffer[*(DWORD *)(key + 1088)], v79, *(unsigned __int8 *)(key + 1081));
//    }
//    else
//    {
//      //memcpy_0(v79, &buffer[*(DWORD *)(key + 1088)], v11);
//    }
//  }
//  if ( a4 & 2 )
//  {
//    switch ( v72 )
//    {
//      case 0:
//        v24 = v9 + *(unsigned __int8 *)(v9 + key + 3) + key + 276;
//        v69 = *(DWORD *)(key + 1092);
//        v25 = 0;
//        v26 = 0;
//        v27 = *(unsigned __int8 *)(key + 1081) + 4;
//        v73 = 64;
//        do
//        {
//          v28 = v26;
//          v29 = *(BYTE *)(v26 + v24) ^ *((BYTE *)&v78 + v25);
//          v30 = v25 + 1;
//          v76[v28] = v29;
//          v77[v28] = v26;
//          if ( v30 >= v27 )
//            v30 = 0;
//          v31 = v26 + 1;
//          v32 = v31;
//          v33 = *(BYTE *)(v31 + v24) ^ *((BYTE *)&v78 + v30);
//          v34 = v30 + 1;
//          v76[v32] = v33;
//          v77[v32] = v31;
//          if ( v34 >= v27 )
//            v34 = 0;
//          v35 = v31 + 1;
//          v36 = v35;
//          v37 = *(BYTE *)(v35 + v24) ^ *((BYTE *)&v78 + v34);
//          v38 = v34 + 1;
//          v76[v36] = v37;
//          v77[v36] = v35;
//          if ( v38 >= v27 )
//            v38 = 0;
//          v39 = v35 + 1;
//          v40 = v39;
//          v41 = *(BYTE *)(v39 + v24) ^ *((BYTE *)&v78 + v38);
//          v25 = v38 + 1;
//          v76[v40] = v41;
//          v77[v40] = v39;
//          if ( v25 >= v27 )
//            v25 = 0;
//          v26 = v39 + 1;
//          --v73;
//        }
//        while ( v73 );
//        v42 = 0;
//        v43 = 0;
//        v74 = 128;
//        do
//        {
//          v44 = v77[v43];
//          v45 = v44 + v76[v43] + v42;
//          v46 = v77[v45];
//          v77[v45] = v44;
//          v77[v43] = v46;
//          v47 = v43 + 1;
//          v48 = v77[v47];
//          v49 = v48 + v76[v47] + v45;
//          v50 = v77[v49];
//          v77[v49] = v48;
//          v77[v47++] = v50;
//          v51 = v77[v47];
//          v52 = &v77[v47];
//          v53 = v51 + v76[v47] + v49;
//          v54 = v77[v53];
//          v77[v53] = v51;
//          ++v47;
//          *v52 = v54;
//          v55 = v77[v47];
//          v56 = &v77[v47];
//          v42 = v55 + v76[v47] + v53;
//          v57 = v77[v42];
//          v43 = v47 + 1;
//          v58 = v74-- == 1;
//          v77[v42] = v55;
//          *v56 = v57;
//        }
//        while ( !v58 );
//        v59 = key;
//        v60 = 0;
//        if ( *(DWORD *)(key + 1088) )
//        {
//          do
//          {
//            v61 = v77[++v43];
//            v62 = &v77[v43];
//            v42 += v61;
//            v63 = &v77[v42];
//            *v62 = *v63;
//            *v63 = v61;
//            *(BYTE *)(v60 + v69) = v77[(unsigned __int8)(v61 + *v62)];
//            v59 = key;
//            ++v60;
//          }
//          while ( v60 < *(DWORD *)(key + 1088) );
//        }
//        v5 = (DWORD *)v59;
//        goto LABEL_53;
//      case 1:
//        v18 = *(BYTE *)(key + 1081);
//        v19 = *(unsigned int **)(key + 1092);
//        v20 = (DWORD *)(v9 + key + 4);
//        v71 = v20;
//        if ( v18 < 0xCu )
//          memset(&v79[v18], 0, 12 - v18);
//        //encode16byte222(v20, &v78, v19);
//        if ( *(DWORD *)(key + 1088) > 0x10u )
//        {
//          v21 = v19;
//          v22 = 16 - (DWORD)v19;
//          do
//          {
//            v23 = (int)(v21 + 4);
//            //encode16byte222(v71, v21, v21 + 4);
//            v21 = (unsigned int *)v23;
//          }
//          while ( (unsigned int)(v22 + v23) < *(DWORD *)(key + 1088) );
//        }
//        goto LABEL_53;
//      case 2:
//        v12 = *(BYTE *)(key + 1081);
//        v13 = *(unsigned int **)(key + 1092);
//        v14 = (DWORD *)(v9 + key + 4);
//        v70 = v14;
//        if ( v12 < 0xCu )
//          memset(&v79[v12], 0, 12 - v12);
//        handle_16bytes(v14, (DWORD*)&v78, v13);
//        if ( *(DWORD *)(key + 1088) > 0x10u )
//        {
//          v15 = v13;
//          v16 = 16 - (DWORD)v13;
//          do
//          {
//            v17 = (int)(v15 + 4);
//            handle_16bytes(v70, (DWORD*)v15, v15 + 4);
//            v15 = (unsigned int *)v17;
//          }
//          while ( (unsigned int)(v16 + v17) < *(DWORD *)(key + 1088) );
//        }
//LABEL_53:
//        v4 = buffer;
//        break;
//    }
//  }
//  v64 = (BYTE *)v5[273];
//  v75 = (BYTE *)v5[273];
//  if ( a4 & 4 )
//    v65 = (BYTE *)v5[274];
//  else
//    v65 = v4;
//  v66 = 0;
//  if ( v5[0x110] )
//  {
//    v67 = v4;
//    do
//    {
//      ++v66;
//      v67[v65 - v4] = *v67 ^ v67[v64 - v4];
//      ++v67;
//    }
//    while ( v66 < v5[0x110] );
//    v64 = v75;
//    v4 = buffer;
//  }
//  if ( v66 < v5[271] )
//  {
//    v68 = &v65[v66];
//    do
//    {
//      *v68 = v68[v4 - v65];
//      ++v66;
//      ++v68;
//    }
//    while ( v66 < v5[271] );
//    v64 = v75;
//  }
//  if ( a3 == 1 )
//  {
//    v65[16] ^= v64[16];
//    v65[17] ^= v64[17];
//    v65[18] ^= v64[18];
//    v65[19] ^= v64[19];
//    v65[20] ^= v64[20];
//    v65[21] ^= v64[21];
//    v65[22] ^= v64[22];
//    v65[23] ^= v64[23];
//  }
//  return v65;
//}


void handle_1000bytes(char* buff, DWORD*key,int num)
{
    DWORD temp_arr[4] = { num,0,0,0 };
    char* tbuff = new char[0x1000];
    memcpy(tbuff, buff, 0x1000);
    int i = 0;
    do 
    {
        handle_16bytes(key, temp_arr, (uint_32*)buff);
        memcpy(temp_arr, buff,16);
        buff += 16;
        i++;
    } while (i<0x100);
    buff -= 0x1000;
    for (int i = 0;i < 0x1000;i++)
    {
        buff[i] ^= tbuff[i];
    }
}

char* get_file_buffer(const char* path, int& file_size)
{
    FILE* fp = fopen(path, "rb");
    fseek(fp, 0, SEEK_END);
    file_size = ftell(fp);
    fseek(fp, 0, SEEK_SET);
    char* buffer = new char[file_size];
    fread(buffer, 1, file_size, fp);
    return buffer;
}

void handle_all_file(const char* path, DWORD*key)
{
    int file_size = 0;
    char* buff = get_file_buffer(path, file_size);
    for (int i = 0;i < file_size / 0x1000;i++)
    {
        handle_1000bytes(buff + i * 0x1000, key, i + 1);
    }

    FILE* fp = fopen("F:\\Job Project\\Suzuki\\gds2_out.db", "wb");
    fwrite(buff, 1, file_size, fp);
    fclose(fp);
}

void handle_flavor_400bytes(char* buff, DWORD* key, int num)
{
    DWORD temp_arr[4] = { num,*(DWORD*)&buff[0x3FC],0,0 };
    char* tbuff = new char[0x400];
    memcpy(tbuff, buff, 0x400);
    int i = 0;
    do
    {
        handle_16bytes(key, temp_arr, (uint_32*)buff);
        memcpy(temp_arr, buff, 16);
        buff += 16;
        i++;
    } while (i < 0x40);
    buff -= 0x400;
    for (int i = 0;i < 0x400;i++)
    {
        buff[i] ^= tbuff[i];
    }
}

void handle_flavor(const char* path, DWORD* key)
{
    int file_size = 0;
    char* buff = get_file_buffer(path, file_size);
    for (int i = 0;i < file_size / 0x400;i++)
    {
        handle_flavor_400bytes(buff + i * 0x400, key, i + 1);
    }

    FILE* fp = fopen("F:\\Job Project\\Suzuki\\flavor_out.db", "wb");
    fwrite(buff, 1, file_size, fp);
    fclose(fp);
}

void hanlde_user_1000bytes(char* buff, DWORD* key, int num)
{
    DWORD temp_arr[4] = { num,0,0,0 };
    char* tbuff = new char[0x1000];
    memcpy(tbuff, buff, 0x1000);
    int i = 0;
    do
    {
        handle_16bytes(key, temp_arr, (uint_32*)buff);
        memcpy(temp_arr, buff, 16);
        buff += 16;
        i++;
    } while (i < 0x100);
    buff -= 0x1000;
    for (int i = 0;i < 0x1000;i++)
    {
        buff[i] ^= tbuff[i];
    }
}

void handle_user(const char* path, DWORD* key)
{
    int file_size = 0;
    char* buff = get_file_buffer(path, file_size);
    for (int i = 0;i < file_size / 0x1000;i++)
    {
        hanlde_user_1000bytes(buff + i * 0x1000, key, i + 1);
    }

    FILE* fp = fopen("F:\\Job Project\\Suzuki\\user_out.db", "wb");
    fwrite(buff, 1, file_size, fp);
    fclose(fp);
}


int main()
{
    //DWORD* key = (DWORD*)"anamemegsitnbmudanamemegsitnbmud";
    //handle_all_file("F:\\Job Project\\Suzuki\\Suzuki SDT-II\\Server\\ngds2.db", gds_key);
    //handle_flavor("F:\\Job Project\\Suzuki\\flavor.db", flavor_key);
    handle_user("F:\\Job Project\\Suzuki\\user.db", user_key);
    return 0;
}